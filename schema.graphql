# This file was generated. Do not edit manually.

schema {
    query: Query
}

"Define parent-child relations between types. This is used to add `child*` and `children*` convenience fields like `childImageSharp`."
directive @childOf(
    "A list of mime-types this type is a child of. Usually these are the mime-types handled by a transformer plugin."
    mimeTypes: [String!]! = [],
    "A list of types this type is a child of. Usually these are the types handled by a transformer plugin."
    types: [String!]! = []
) on OBJECT

"Add date formatting options."
directive @dateformat(difference: String, formatString: String, fromNow: Boolean, locale: String) on FIELD_DEFINITION

"Do not infer field types from field values."
directive @dontInfer on OBJECT

"Link to File node by relative path."
directive @fileByRelativePath(from: String) on FIELD_DEFINITION

"Infer field types from field values."
directive @infer on OBJECT

"Link to node by foreign-key relation."
directive @link(by: String! = "id", from: String, on: String) on FIELD_DEFINITION

"Define the mime-types handled by this type."
directive @mimeTypes(
    "The mime-types handled by this type."
    types: [String!]! = []
) on OBJECT

"""

DEPRECATED: Use interface inheritance instead, i.e. "interface Foo implements Node".

Adds root query fields for an interface. All implementing types must also implement the Node interface.
"""
directive @nodeInterface on INTERFACE

"Proxy resolver from another field."
directive @proxy(from: String!, fromNode: Boolean! = false) on FIELD_DEFINITION

"Node Interface"
interface Node {
    children: [Node!]!
    id: ID!
    internal: Internal!
    parent: Node
}

type DatoCmsAsset implements Node {
    author: String
    basename: String
    blurhash: String
    children: [Node!]!
    colors: [DatoCmsColorField]
    copyright: String
    createdAt(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date
    exifInfo: JSON
    filename: String
    fixed(forceBlurhash: Boolean, height: Int, imgixParams: DatoCmsImgixParams, width: Int = 400): DatoCmsFixed
    fluid(forceBlurhash: Boolean, imgixParams: DatoCmsImgixParams, maxHeight: Int, maxWidth: Int = 800, sizes: String): DatoCmsFluid
    format: String
    gatsbyImageData(
        """

        If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
        If neither width or height is provided, height will be set based on the intrinsic width of the source image.
        """
        aspectRatio: Float,
        "Background color applied to the wrapper, or when \"letterboxing\" an image to another aspect ratio."
        backgroundColor: String,
        """

        Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
        based on the image size. For FULL_WIDTH images this can be used to override the default, which is determined by the plugin.
        It will never generate any images larger than the source.
        """
        breakpoints: [Int],
        forceBlurhash: Boolean,
        "If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image."
        height: Int,
        imgixParams: DatoCmsImgixParams,
        """

        The layout for the image.
        FIXED: A static image sized, that does not resize according to the screen width
        FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
        CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
        """
        layout: GatsbyImageLayout,
        """

        A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
        Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
        Ignored for FULL_WIDTH, which uses breakpoints instead.
        """
        outputPixelDensities: [Float],
        """

        Format of generated placeholder, displayed while the main image loads.
        DOMINANT_COLOR: a solid color, calculated from the dominant color of the image (default).
        BLURRED: a blurred, low resolution image, encoded as a base64 data URI
        TRACED_SVG: a low-resolution traced SVG of the image. Note that this will download the image at build time for processing.
        NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
        """
        placeholder: DatoImagePlaceholder,
        """

        The "sizes" property, passed to the img tag. This describes the display size of the image.
        This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
        container will be the full width of the screen. In these cases we will generate an appropriate value.
        """
        sizes: String,
        """

        The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
        The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
        Ignored if layout = FULL_WIDTH.
        """
        width: Int
    ): JSON
    height: Int
    id: ID!
    internal: Internal!
    isImage: Boolean
    mimeType: String
    notes: String
    originalId: String!
    parent: Node
    path: String
    resolutions(forceBlurhash: Boolean, height: Int, imgixParams: DatoCmsImgixParams, width: Int = 400): DatoCmsFixed
    size: Int
    sizes(forceBlurhash: Boolean, imgixParams: DatoCmsImgixParams, maxHeight: Int, maxWidth: Int = 800, sizes: String): DatoCmsFluid
    smartTags: [String]
    tags: [String]
    url(imgixParams: DatoCmsImgixParams): String
    video: DatoCmsAssetVideo
    width: Int
}

type DatoCmsAssetConnection {
    distinct(field: DatoCmsAssetFieldSelector!): [String!]!
    edges: [DatoCmsAssetEdge!]!
    group(field: DatoCmsAssetFieldSelector!, limit: Int, skip: Int): [DatoCmsAssetGroupConnection!]!
    max(field: DatoCmsAssetFieldSelector!): Float
    min(field: DatoCmsAssetFieldSelector!): Float
    nodes: [DatoCmsAsset!]!
    pageInfo: PageInfo!
    sum(field: DatoCmsAssetFieldSelector!): Float
    totalCount: Int!
}

type DatoCmsAssetEdge {
    next: DatoCmsAsset
    node: DatoCmsAsset!
    previous: DatoCmsAsset
}

type DatoCmsAssetGroupConnection {
    distinct(field: DatoCmsAssetFieldSelector!): [String!]!
    edges: [DatoCmsAssetEdge!]!
    field: String!
    fieldValue: String
    group(field: DatoCmsAssetFieldSelector!, limit: Int, skip: Int): [DatoCmsAssetGroupConnection!]!
    max(field: DatoCmsAssetFieldSelector!): Float
    min(field: DatoCmsAssetFieldSelector!): Float
    nodes: [DatoCmsAsset!]!
    pageInfo: PageInfo!
    sum(field: DatoCmsAssetFieldSelector!): Float
    totalCount: Int!
}

type DatoCmsAssetVideo {
    duration: Int
    frameRate: Int
    mp4Url(exactRes: DatoCmsAssetVideoMp4ResolutionQuality, res: DatoCmsAssetVideoMp4ResolutionQuality): String
    muxPlaybackId: String
    streamingUrl: String
    thumbnailUrl(format: DatoCmsAssetVideoThumbnailFormat): String
}

type DatoCmsColorField {
    alpha: Int
    blue: Int
    green: Int
    hex: String
    red: Int
    rgb: String
}

type DatoCmsFaviconMetaTags {
    tags: JSON
}

type DatoCmsField implements Node {
    apiKey: String
    appeareance: JSON
    children: [Node!]!
    defaultValue: JSON
    fieldType: String
    id: ID!
    internal: Internal!
    label: String
    localized: Boolean
    originalId: String!
    parent: Node
    position: Int
    validators: JSON
}

type DatoCmsFieldConnection {
    distinct(field: DatoCmsFieldFieldSelector!): [String!]!
    edges: [DatoCmsFieldEdge!]!
    group(field: DatoCmsFieldFieldSelector!, limit: Int, skip: Int): [DatoCmsFieldGroupConnection!]!
    max(field: DatoCmsFieldFieldSelector!): Float
    min(field: DatoCmsFieldFieldSelector!): Float
    nodes: [DatoCmsField!]!
    pageInfo: PageInfo!
    sum(field: DatoCmsFieldFieldSelector!): Float
    totalCount: Int!
}

type DatoCmsFieldEdge {
    next: DatoCmsField
    node: DatoCmsField!
    previous: DatoCmsField
}

type DatoCmsFieldGroupConnection {
    distinct(field: DatoCmsFieldFieldSelector!): [String!]!
    edges: [DatoCmsFieldEdge!]!
    field: String!
    fieldValue: String
    group(field: DatoCmsFieldFieldSelector!, limit: Int, skip: Int): [DatoCmsFieldGroupConnection!]!
    max(field: DatoCmsFieldFieldSelector!): Float
    min(field: DatoCmsFieldFieldSelector!): Float
    nodes: [DatoCmsField!]!
    pageInfo: PageInfo!
    sum(field: DatoCmsFieldFieldSelector!): Float
    totalCount: Int!
}

type DatoCmsFileField {
    alt: String
    author: String
    basename: String
    blurhash: String
    colors: [DatoCmsColorField]
    copyright: String
    createdAt(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date
    customData: JSON
    exifInfo: JSON
    filename: String
    fixed(forceBlurhash: Boolean, height: Int, imgixParams: DatoCmsImgixParams, width: Int = 400): DatoCmsFixed
    fluid(forceBlurhash: Boolean, imgixParams: DatoCmsImgixParams, maxHeight: Int, maxWidth: Int = 800, sizes: String): DatoCmsFluid
    focalPoint: DatoCmsFocalPoint
    format: String
    gatsbyImageData(
        """

        If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
        If neither width or height is provided, height will be set based on the intrinsic width of the source image.
        """
        aspectRatio: Float,
        "Background color applied to the wrapper, or when \"letterboxing\" an image to another aspect ratio."
        backgroundColor: String,
        """

        Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
        based on the image size. For FULL_WIDTH images this can be used to override the default, which is determined by the plugin.
        It will never generate any images larger than the source.
        """
        breakpoints: [Int],
        forceBlurhash: Boolean,
        "If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image."
        height: Int,
        imgixParams: DatoCmsImgixParams,
        """

        The layout for the image.
        FIXED: A static image sized, that does not resize according to the screen width
        FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
        CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
        """
        layout: GatsbyImageLayout,
        """

        A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
        Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
        Ignored for FULL_WIDTH, which uses breakpoints instead.
        """
        outputPixelDensities: [Float],
        """

        Format of generated placeholder, displayed while the main image loads.
        DOMINANT_COLOR: a solid color, calculated from the dominant color of the image (default).
        BLURRED: a blurred, low resolution image, encoded as a base64 data URI
        TRACED_SVG: a low-resolution traced SVG of the image. Note that this will download the image at build time for processing.
        NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
        """
        placeholder: DatoImagePlaceholder,
        """

        The "sizes" property, passed to the img tag. This describes the display size of the image.
        This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
        container will be the full width of the screen. In these cases we will generate an appropriate value.
        """
        sizes: String,
        """

        The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
        The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
        Ignored if layout = FULL_WIDTH.
        """
        width: Int
    ): JSON
    height: Int
    isImage: Boolean
    mimeType: String
    notes: String
    originalId: String!
    path: String
    resolutions(forceBlurhash: Boolean, height: Int, imgixParams: DatoCmsImgixParams, width: Int = 400): DatoCmsFixed
    size: Int
    sizes(forceBlurhash: Boolean, imgixParams: DatoCmsImgixParams, maxHeight: Int, maxWidth: Int = 800, sizes: String): DatoCmsFluid
    smartTags: [String]
    tags: [String]
    title: String
    url(imgixParams: DatoCmsImgixParams): String
    video: DatoCmsAssetVideo
    width: Int
}

type DatoCmsFixed {
    aspectRatio: Float
    base64: String
    height: Int!
    sizes: String
    src: String!
    srcSet: String!
    tracedSVG: String
    width: Int!
}

type DatoCmsFluid {
    aspectRatio: Float!
    base64: String
    height: Int
    sizes: String!
    src: String!
    srcSet: String!
    tracedSVG: String
    width: Int
}

type DatoCmsFocalPoint {
    x: Float!
    y: Float!
}

type DatoCmsGlobalSeo {
    facebookPageUrl: String
    fallbackSeo: DatoCmsSeoField
    siteName: String
    titleSuffix: String
    twitterAccount: String
}

type DatoCmsLatLonField {
    latitude: Float
    longitude: Float
}

type DatoCmsMetaField {
    createdAt(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date
    firstPublishedAt(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date
    isValid: Boolean
    publishedAt(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date
    status: String
    updatedAt(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date
}

type DatoCmsModel implements Node {
    allLocalesRequired: Boolean
    apiKey: String
    children: [Node!]!
    collectionAppeareance: String
    draftModeActive: Boolean
    fields: [DatoCmsField!]
    hasSingletonItem: Boolean
    id: ID!
    internal: Internal!
    modularBlock: Boolean
    name: String
    orderingDirection: String
    originalId: String!
    parent: Node
    singleton: Boolean
    sortable: Boolean
    tree: Boolean
}

type DatoCmsModelConnection {
    distinct(field: DatoCmsModelFieldSelector!): [String!]!
    edges: [DatoCmsModelEdge!]!
    group(field: DatoCmsModelFieldSelector!, limit: Int, skip: Int): [DatoCmsModelGroupConnection!]!
    max(field: DatoCmsModelFieldSelector!): Float
    min(field: DatoCmsModelFieldSelector!): Float
    nodes: [DatoCmsModel!]!
    pageInfo: PageInfo!
    sum(field: DatoCmsModelFieldSelector!): Float
    totalCount: Int!
}

type DatoCmsModelEdge {
    next: DatoCmsModel
    node: DatoCmsModel!
    previous: DatoCmsModel
}

type DatoCmsModelGroupConnection {
    distinct(field: DatoCmsModelFieldSelector!): [String!]!
    edges: [DatoCmsModelEdge!]!
    field: String!
    fieldValue: String
    group(field: DatoCmsModelFieldSelector!, limit: Int, skip: Int): [DatoCmsModelGroupConnection!]!
    max(field: DatoCmsModelFieldSelector!): Float
    min(field: DatoCmsModelFieldSelector!): Float
    nodes: [DatoCmsModel!]!
    pageInfo: PageInfo!
    sum(field: DatoCmsModelFieldSelector!): Float
    totalCount: Int!
}

type DatoCmsSeoField {
    description: String
    image: DatoCmsAsset
    title: String
    twitterCard: String
}

type DatoCmsSeoMetaTags {
    tags: JSON
}

type DatoCmsSite implements Node {
    children: [Node!]!
    domain: String
    faviconMetaTags: DatoCmsFaviconMetaTags
    globalSeo(fallbackLocales: [String!], locale: String): DatoCmsGlobalSeo
    id: ID!
    internal: Internal!
    internalDomain: String!
    locales: [String!]!
    name: String
    noIndex: Boolean
    originalId: String!
    parent: Node
}

type DatoCmsSiteConnection {
    distinct(field: DatoCmsSiteFieldSelector!): [String!]!
    edges: [DatoCmsSiteEdge!]!
    group(field: DatoCmsSiteFieldSelector!, limit: Int, skip: Int): [DatoCmsSiteGroupConnection!]!
    max(field: DatoCmsSiteFieldSelector!): Float
    min(field: DatoCmsSiteFieldSelector!): Float
    nodes: [DatoCmsSite!]!
    pageInfo: PageInfo!
    sum(field: DatoCmsSiteFieldSelector!): Float
    totalCount: Int!
}

type DatoCmsSiteEdge {
    next: DatoCmsSite
    node: DatoCmsSite!
    previous: DatoCmsSite
}

type DatoCmsSiteGroupConnection {
    distinct(field: DatoCmsSiteFieldSelector!): [String!]!
    edges: [DatoCmsSiteEdge!]!
    field: String!
    fieldValue: String
    group(field: DatoCmsSiteFieldSelector!, limit: Int, skip: Int): [DatoCmsSiteGroupConnection!]!
    max(field: DatoCmsSiteFieldSelector!): Float
    min(field: DatoCmsSiteFieldSelector!): Float
    nodes: [DatoCmsSite!]!
    pageInfo: PageInfo!
    sum(field: DatoCmsSiteFieldSelector!): Float
    totalCount: Int!
}

type DatoCmsTextNode implements Node {
    children: [Node!]!
    id: ID!
    internal: Internal!
    parent: Node
}

type DatoCmsTextNodeConnection {
    distinct(field: DatoCmsTextNodeFieldSelector!): [String!]!
    edges: [DatoCmsTextNodeEdge!]!
    group(field: DatoCmsTextNodeFieldSelector!, limit: Int, skip: Int): [DatoCmsTextNodeGroupConnection!]!
    max(field: DatoCmsTextNodeFieldSelector!): Float
    min(field: DatoCmsTextNodeFieldSelector!): Float
    nodes: [DatoCmsTextNode!]!
    pageInfo: PageInfo!
    sum(field: DatoCmsTextNodeFieldSelector!): Float
    totalCount: Int!
}

type DatoCmsTextNodeEdge {
    next: DatoCmsTextNode
    node: DatoCmsTextNode!
    previous: DatoCmsTextNode
}

type DatoCmsTextNodeGroupConnection {
    distinct(field: DatoCmsTextNodeFieldSelector!): [String!]!
    edges: [DatoCmsTextNodeEdge!]!
    field: String!
    fieldValue: String
    group(field: DatoCmsTextNodeFieldSelector!, limit: Int, skip: Int): [DatoCmsTextNodeGroupConnection!]!
    max(field: DatoCmsTextNodeFieldSelector!): Float
    min(field: DatoCmsTextNodeFieldSelector!): Float
    nodes: [DatoCmsTextNode!]!
    pageInfo: PageInfo!
    sum(field: DatoCmsTextNodeFieldSelector!): Float
    totalCount: Int!
}

type DatoCmsVideoField {
    height: Int
    provider: String
    providerUid: String
    thumbnailUrl: String
    title: String
    url: String
    width: Int
}

type Directory implements Node {
    absolutePath: String!
    accessTime(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date!
    atime(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date!
    atimeMs: Float!
    base: String!
    birthTime(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date!
    birthtime: Date @deprecated(reason: "Use `birthTime` instead")
    birthtimeMs: Float @deprecated(reason: "Use `birthTime` instead")
    changeTime(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date!
    children: [Node!]!
    ctime(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date!
    ctimeMs: Float!
    dev: Int!
    dir: String!
    ext: String!
    extension: String!
    gid: Int!
    id: ID!
    ino: Float!
    internal: Internal!
    mode: Int!
    modifiedTime(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date!
    mtime(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date!
    mtimeMs: Float!
    name: String!
    nlink: Int!
    parent: Node
    prettySize: String!
    rdev: Int!
    relativeDirectory: String!
    relativePath: String!
    root: String!
    size: Int!
    sourceInstanceName: String!
    uid: Int!
}

type DirectoryConnection {
    distinct(field: DirectoryFieldSelector!): [String!]!
    edges: [DirectoryEdge!]!
    group(field: DirectoryFieldSelector!, limit: Int, skip: Int): [DirectoryGroupConnection!]!
    max(field: DirectoryFieldSelector!): Float
    min(field: DirectoryFieldSelector!): Float
    nodes: [Directory!]!
    pageInfo: PageInfo!
    sum(field: DirectoryFieldSelector!): Float
    totalCount: Int!
}

type DirectoryEdge {
    next: Directory
    node: Directory!
    previous: Directory
}

type DirectoryGroupConnection {
    distinct(field: DirectoryFieldSelector!): [String!]!
    edges: [DirectoryEdge!]!
    field: String!
    fieldValue: String
    group(field: DirectoryFieldSelector!, limit: Int, skip: Int): [DirectoryGroupConnection!]!
    max(field: DirectoryFieldSelector!): Float
    min(field: DirectoryFieldSelector!): Float
    nodes: [Directory!]!
    pageInfo: PageInfo!
    sum(field: DirectoryFieldSelector!): Float
    totalCount: Int!
}

type File implements Node {
    absolutePath: String!
    accessTime(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date!
    atime(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date!
    atimeMs: Float!
    base: String!
    birthTime(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date!
    birthtime: Date @deprecated(reason: "Use `birthTime` instead")
    birthtimeMs: Float @deprecated(reason: "Use `birthTime` instead")
    blksize: Int
    blocks: Int
    changeTime(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date!
    "Returns the first child node of type ImageSharp or null if there are no children of given type on this node"
    childImageSharp: ImageSharp
    children: [Node!]!
    "Returns all children nodes filtered by type ImageSharp"
    childrenImageSharp: [ImageSharp]
    ctime(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date!
    ctimeMs: Float!
    dev: Int!
    dir: String!
    ext: String!
    extension: String!
    gid: Int!
    id: ID!
    ino: Float!
    internal: Internal!
    mode: Int!
    modifiedTime(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date!
    mtime(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date!
    mtimeMs: Float!
    name: String!
    nlink: Int!
    parent: Node
    prettySize: String!
    "Copy file to static directory and return public url to it"
    publicURL: String
    rdev: Int!
    relativeDirectory: String!
    relativePath: String!
    root: String!
    size: Int!
    sourceInstanceName: String!
    uid: Int!
}

type FileConnection {
    distinct(field: FileFieldSelector!): [String!]!
    edges: [FileEdge!]!
    group(field: FileFieldSelector!, limit: Int, skip: Int): [FileGroupConnection!]!
    max(field: FileFieldSelector!): Float
    min(field: FileFieldSelector!): Float
    nodes: [File!]!
    pageInfo: PageInfo!
    sum(field: FileFieldSelector!): Float
    totalCount: Int!
}

type FileEdge {
    next: File
    node: File!
    previous: File
}

type FileGroupConnection {
    distinct(field: FileFieldSelector!): [String!]!
    edges: [FileEdge!]!
    field: String!
    fieldValue: String
    group(field: FileFieldSelector!, limit: Int, skip: Int): [FileGroupConnection!]!
    max(field: FileFieldSelector!): Float
    min(field: FileFieldSelector!): Float
    nodes: [File!]!
    pageInfo: PageInfo!
    sum(field: FileFieldSelector!): Float
    totalCount: Int!
}

type ImageSharp implements Node {
    children: [Node!]!
    fixed(background: String = "rgba(0,0,0,1)", base64Width: Int, cropFocus: ImageCropFocus = ATTENTION, duotone: DuotoneGradient, fit: ImageFit = COVER, grayscale: Boolean = false, height: Int, jpegProgressive: Boolean = true, jpegQuality: Int, pngCompressionSpeed: Int = 4, pngQuality: Int, quality: Int, rotate: Int = 0, toFormat: ImageFormat = AUTO, toFormatBase64: ImageFormat = AUTO, traceSVG: Potrace, trim: Float = 0.0, webpQuality: Int, width: Int): ImageSharpFixed
    fluid(
        background: String = "rgba(0,0,0,1)",
        base64Width: Int,
        cropFocus: ImageCropFocus = ATTENTION,
        duotone: DuotoneGradient,
        fit: ImageFit = COVER,
        grayscale: Boolean = false,
        jpegProgressive: Boolean = true,
        jpegQuality: Int,
        maxHeight: Int,
        maxWidth: Int,
        pngCompressionSpeed: Int = 4,
        pngQuality: Int,
        quality: Int,
        rotate: Int = 0,
        sizes: String = "",
        "A list of image widths to be generated. Example: [ 200, 340, 520, 890 ]"
        srcSetBreakpoints: [Int] = [],
        toFormat: ImageFormat = AUTO,
        toFormatBase64: ImageFormat = AUTO,
        traceSVG: Potrace,
        trim: Float = 0.0,
        webpQuality: Int
    ): ImageSharpFluid
    gatsbyImageData(
        """

        If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
        If neither width or height is provided, height will be set based on the intrinsic width of the source image.
        """
        aspectRatio: Float,
        "Options to pass to sharp when generating AVIF images."
        avifOptions: AVIFOptions,
        "Background color applied to the wrapper. Also passed to sharp to use as a background when \"letterboxing\" an image to another aspect ratio."
        backgroundColor: String,
        "Options for the low-resolution placeholder image. Set placeholder to \"BLURRED\" to use this"
        blurredOptions: BlurredOptions,
        """

        Specifies the image widths to generate. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
        based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
        It will never generate any images larger than the source.
        """
        breakpoints: [Int],
        """

        The image formats to generate. Valid values are "AUTO" (meaning the same format as the source image), "JPG", "PNG", "WEBP" and "AVIF".
        The default value is [AUTO, WEBP], and you should rarely need to change this. Take care if you specify JPG or PNG when you do
        not know the formats of the source images, as this could lead to unwanted results such as converting JPEGs to PNGs. Specifying
        both PNG and JPG is not supported and will be ignored.
        """
        formats: [ImageFormat],
        """

        The display height of the generated image for layout = FIXED, and the maximum display height of the largest image for layout = CONSTRAINED.
        The image will be cropped if the aspect ratio does not match the source image. If omitted, it is calculated from the supplied width,
        matching the aspect ratio of the source image.
        """
        height: Int,
        "Options to pass to sharp when generating JPG images."
        jpgOptions: JPGOptions,
        """

        The layout for the image.
        FIXED: A static image sized, that does not resize according to the screen width
        FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
        CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
        """
        layout: ImageLayout = CONSTRAINED,
        """

        A list of image pixel densities to generate. It will never generate images larger than the source, and will always include a 1x image.
        Default is [ 1, 2 ] for FIXED images, meaning 1x and 2x and [0.25, 0.5, 1, 2] for CONSTRAINED. In this case, an image with a constrained layout
        and width = 400 would generate images at 100, 200, 400 and 800px wide. Ignored for FULL_WIDTH images, which use breakpoints instead
        """
        outputPixelDensities: [Float],
        """

        Format of generated placeholder image, displayed while the main image loads.
        BLURRED: a blurred, low resolution image, encoded as a base64 data URI
        DOMINANT_COLOR: a solid color, calculated from the dominant color of the image (default).
        TRACED_SVG: deprecated. Will use DOMINANT_COLOR.
        NONE: no placeholder. Set "background" to use a fixed background color.
        """
        placeholder: ImagePlaceholder,
        "Options to pass to sharp when generating PNG images."
        pngOptions: PNGOptions,
        "The default quality. This is overridden by any format-specific options"
        quality: Int,
        """

        The "sizes" property, passed to the img tag. This describes the display size of the image.
        This does not affect the generated images, but is used by the browser to decide which images to download.
        You should usually leave this blank, and a suitable value will be calculated. The exception is if a FULL_WIDTH image
        does not actually span the full width of the screen, in which case you should pass the correct size here.
        """
        sizes: String,
        "Options for traced placeholder SVGs. You also should set placeholder to \"TRACED_SVG\"."
        tracedSVGOptions: Potrace,
        "Options to pass to sharp to control cropping and other image manipulations."
        transformOptions: TransformOptions,
        "Options to pass to sharp when generating WebP images."
        webpOptions: WebPOptions,
        """

        The display width of the generated image for layout = FIXED, and the maximum display width of the largest image for layout = CONSTRAINED.
        Ignored if layout = FLUID.
        """
        width: Int
    ): GatsbyImageData!
    id: ID!
    internal: Internal!
    original: ImageSharpOriginal
    parent: Node
    resize(background: String = "rgba(0,0,0,1)", base64: Boolean = false, cropFocus: ImageCropFocus = ATTENTION, duotone: DuotoneGradient, fit: ImageFit = COVER, grayscale: Boolean = false, height: Int, jpegProgressive: Boolean = true, jpegQuality: Int, pngCompressionLevel: Int = 9, pngCompressionSpeed: Int = 4, pngQuality: Int, quality: Int, rotate: Int = 0, toFormat: ImageFormat = AUTO, traceSVG: Potrace, trim: Float = 0.0, webpQuality: Int, width: Int): ImageSharpResize
}

type ImageSharpConnection {
    distinct(field: ImageSharpFieldSelector!): [String!]!
    edges: [ImageSharpEdge!]!
    group(field: ImageSharpFieldSelector!, limit: Int, skip: Int): [ImageSharpGroupConnection!]!
    max(field: ImageSharpFieldSelector!): Float
    min(field: ImageSharpFieldSelector!): Float
    nodes: [ImageSharp!]!
    pageInfo: PageInfo!
    sum(field: ImageSharpFieldSelector!): Float
    totalCount: Int!
}

type ImageSharpEdge {
    next: ImageSharp
    node: ImageSharp!
    previous: ImageSharp
}

type ImageSharpFixed {
    aspectRatio: Float
    base64: String
    height: Float!
    originalName: String
    src: String!
    srcSet: String!
    srcSetWebp: String
    srcWebp: String
    tracedSVG: String
    width: Float!
}

type ImageSharpFluid {
    aspectRatio: Float!
    base64: String
    originalImg: String
    originalName: String
    presentationHeight: Int!
    presentationWidth: Int!
    sizes: String!
    src: String!
    srcSet: String!
    srcSetWebp: String
    srcWebp: String
    tracedSVG: String
}

type ImageSharpGroupConnection {
    distinct(field: ImageSharpFieldSelector!): [String!]!
    edges: [ImageSharpEdge!]!
    field: String!
    fieldValue: String
    group(field: ImageSharpFieldSelector!, limit: Int, skip: Int): [ImageSharpGroupConnection!]!
    max(field: ImageSharpFieldSelector!): Float
    min(field: ImageSharpFieldSelector!): Float
    nodes: [ImageSharp!]!
    pageInfo: PageInfo!
    sum(field: ImageSharpFieldSelector!): Float
    totalCount: Int!
}

type ImageSharpOriginal {
    height: Float
    src: String
    width: Float
}

type ImageSharpResize {
    aspectRatio: Float
    height: Int
    originalName: String
    src: String
    tracedSVG: String
    width: Int
}

type Internal {
    content: String
    contentDigest: String!
    contentFilePath: String
    description: String
    fieldOwners: [String]
    ignoreType: Boolean
    mediaType: String
    owner: String!
    type: String!
}

type PageInfo {
    currentPage: Int!
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
    itemCount: Int!
    pageCount: Int!
    perPage: Int
    totalCount: Int!
}

type Query {
    allDatoCmsAsset(fallbackLocales: [String!], filter: DatoCmsAssetFilterInput, limit: Int, locale: String, skip: Int, sort: [DatoCmsAssetSortInput]): DatoCmsAssetConnection!
    allDatoCmsField(fallbackLocales: [String!], filter: DatoCmsFieldFilterInput, limit: Int, locale: String, skip: Int, sort: [DatoCmsFieldSortInput]): DatoCmsFieldConnection!
    allDatoCmsModel(fallbackLocales: [String!], filter: DatoCmsModelFilterInput, limit: Int, locale: String, skip: Int, sort: [DatoCmsModelSortInput]): DatoCmsModelConnection!
    allDatoCmsSite(fallbackLocales: [String!], filter: DatoCmsSiteFilterInput, limit: Int, locale: String, skip: Int, sort: [DatoCmsSiteSortInput]): DatoCmsSiteConnection!
    allDatoCmsTextNode(fallbackLocales: [String!], filter: DatoCmsTextNodeFilterInput, limit: Int, locale: String, skip: Int, sort: [DatoCmsTextNodeSortInput]): DatoCmsTextNodeConnection!
    allDirectory(filter: DirectoryFilterInput, limit: Int, skip: Int, sort: [DirectorySortInput]): DirectoryConnection!
    allFile(filter: FileFilterInput, limit: Int, skip: Int, sort: [FileSortInput]): FileConnection!
    allImageSharp(filter: ImageSharpFilterInput, limit: Int, skip: Int, sort: [ImageSharpSortInput]): ImageSharpConnection!
    allSite(filter: SiteFilterInput, limit: Int, skip: Int, sort: [SiteSortInput]): SiteConnection!
    allSiteBuildMetadata(filter: SiteBuildMetadataFilterInput, limit: Int, skip: Int, sort: [SiteBuildMetadataSortInput]): SiteBuildMetadataConnection!
    allSiteFunction(filter: SiteFunctionFilterInput, limit: Int, skip: Int, sort: [SiteFunctionSortInput]): SiteFunctionConnection!
    allSitePage(filter: SitePageFilterInput, limit: Int, skip: Int, sort: [SitePageSortInput]): SitePageConnection!
    allSitePlugin(filter: SitePluginFilterInput, limit: Int, skip: Int, sort: [SitePluginSortInput]): SitePluginConnection!
    datoCmsAsset(author: StringQueryOperatorInput, basename: StringQueryOperatorInput, blurhash: StringQueryOperatorInput, children: NodeFilterListInput, colors: DatoCmsColorFieldFilterListInput, copyright: StringQueryOperatorInput, createdAt: DateQueryOperatorInput, exifInfo: JSONQueryOperatorInput, fallbackLocales: [String!], filename: StringQueryOperatorInput, fixed: DatoCmsFixedFilterInput, fluid: DatoCmsFluidFilterInput, format: StringQueryOperatorInput, gatsbyImageData: JSONQueryOperatorInput, height: IntQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, isImage: BooleanQueryOperatorInput, locale: String, mimeType: StringQueryOperatorInput, notes: StringQueryOperatorInput, originalId: StringQueryOperatorInput, parent: NodeFilterInput, path: StringQueryOperatorInput, resolutions: DatoCmsFixedFilterInput, size: IntQueryOperatorInput, sizes: DatoCmsFluidFilterInput, smartTags: StringQueryOperatorInput, tags: StringQueryOperatorInput, url: StringQueryOperatorInput, video: DatoCmsAssetVideoFilterInput, width: IntQueryOperatorInput): DatoCmsAsset
    datoCmsField(apiKey: StringQueryOperatorInput, appeareance: JSONQueryOperatorInput, children: NodeFilterListInput, defaultValue: JSONQueryOperatorInput, fallbackLocales: [String!], fieldType: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, label: StringQueryOperatorInput, locale: String, localized: BooleanQueryOperatorInput, originalId: StringQueryOperatorInput, parent: NodeFilterInput, position: IntQueryOperatorInput, validators: JSONQueryOperatorInput): DatoCmsField
    datoCmsModel(allLocalesRequired: BooleanQueryOperatorInput, apiKey: StringQueryOperatorInput, children: NodeFilterListInput, collectionAppeareance: StringQueryOperatorInput, draftModeActive: BooleanQueryOperatorInput, fallbackLocales: [String!], fields: DatoCmsFieldFilterListInput, hasSingletonItem: BooleanQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, locale: String, modularBlock: BooleanQueryOperatorInput, name: StringQueryOperatorInput, orderingDirection: StringQueryOperatorInput, originalId: StringQueryOperatorInput, parent: NodeFilterInput, singleton: BooleanQueryOperatorInput, sortable: BooleanQueryOperatorInput, tree: BooleanQueryOperatorInput): DatoCmsModel
    datoCmsSite(children: NodeFilterListInput, domain: StringQueryOperatorInput, fallbackLocales: [String!], faviconMetaTags: DatoCmsFaviconMetaTagsFilterInput, globalSeo: DatoCmsGlobalSeoFilterInput, id: StringQueryOperatorInput, internal: InternalFilterInput, internalDomain: StringQueryOperatorInput, locale: String, locales: StringQueryOperatorInput, name: StringQueryOperatorInput, noIndex: BooleanQueryOperatorInput, originalId: StringQueryOperatorInput, parent: NodeFilterInput): DatoCmsSite
    datoCmsTextNode(children: NodeFilterListInput, fallbackLocales: [String!], id: StringQueryOperatorInput, internal: InternalFilterInput, locale: String, parent: NodeFilterInput): DatoCmsTextNode
    directory(absolutePath: StringQueryOperatorInput, accessTime: DateQueryOperatorInput, atime: DateQueryOperatorInput, atimeMs: FloatQueryOperatorInput, base: StringQueryOperatorInput, birthTime: DateQueryOperatorInput, birthtime: DateQueryOperatorInput, birthtimeMs: FloatQueryOperatorInput, changeTime: DateQueryOperatorInput, children: NodeFilterListInput, ctime: DateQueryOperatorInput, ctimeMs: FloatQueryOperatorInput, dev: IntQueryOperatorInput, dir: StringQueryOperatorInput, ext: StringQueryOperatorInput, extension: StringQueryOperatorInput, gid: IntQueryOperatorInput, id: StringQueryOperatorInput, ino: FloatQueryOperatorInput, internal: InternalFilterInput, mode: IntQueryOperatorInput, modifiedTime: DateQueryOperatorInput, mtime: DateQueryOperatorInput, mtimeMs: FloatQueryOperatorInput, name: StringQueryOperatorInput, nlink: IntQueryOperatorInput, parent: NodeFilterInput, prettySize: StringQueryOperatorInput, rdev: IntQueryOperatorInput, relativeDirectory: StringQueryOperatorInput, relativePath: StringQueryOperatorInput, root: StringQueryOperatorInput, size: IntQueryOperatorInput, sourceInstanceName: StringQueryOperatorInput, uid: IntQueryOperatorInput): Directory
    file(absolutePath: StringQueryOperatorInput, accessTime: DateQueryOperatorInput, atime: DateQueryOperatorInput, atimeMs: FloatQueryOperatorInput, base: StringQueryOperatorInput, birthTime: DateQueryOperatorInput, birthtime: DateQueryOperatorInput, birthtimeMs: FloatQueryOperatorInput, blksize: IntQueryOperatorInput, blocks: IntQueryOperatorInput, changeTime: DateQueryOperatorInput, childImageSharp: ImageSharpFilterInput, children: NodeFilterListInput, childrenImageSharp: ImageSharpFilterListInput, ctime: DateQueryOperatorInput, ctimeMs: FloatQueryOperatorInput, dev: IntQueryOperatorInput, dir: StringQueryOperatorInput, ext: StringQueryOperatorInput, extension: StringQueryOperatorInput, gid: IntQueryOperatorInput, id: StringQueryOperatorInput, ino: FloatQueryOperatorInput, internal: InternalFilterInput, mode: IntQueryOperatorInput, modifiedTime: DateQueryOperatorInput, mtime: DateQueryOperatorInput, mtimeMs: FloatQueryOperatorInput, name: StringQueryOperatorInput, nlink: IntQueryOperatorInput, parent: NodeFilterInput, prettySize: StringQueryOperatorInput, publicURL: StringQueryOperatorInput, rdev: IntQueryOperatorInput, relativeDirectory: StringQueryOperatorInput, relativePath: StringQueryOperatorInput, root: StringQueryOperatorInput, size: IntQueryOperatorInput, sourceInstanceName: StringQueryOperatorInput, uid: IntQueryOperatorInput): File
    imageSharp(children: NodeFilterListInput, fixed: ImageSharpFixedFilterInput, fluid: ImageSharpFluidFilterInput, gatsbyImageData: GatsbyImageDataQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, original: ImageSharpOriginalFilterInput, parent: NodeFilterInput, resize: ImageSharpResizeFilterInput): ImageSharp
    site(buildTime: DateQueryOperatorInput, children: NodeFilterListInput, graphqlTypegen: SiteGraphqlTypegenFilterInput, host: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, jsxRuntime: StringQueryOperatorInput, parent: NodeFilterInput, pathPrefix: StringQueryOperatorInput, polyfill: BooleanQueryOperatorInput, port: IntQueryOperatorInput, siteMetadata: SiteSiteMetadataFilterInput, trailingSlash: StringQueryOperatorInput): Site
    siteBuildMetadata(buildTime: DateQueryOperatorInput, children: NodeFilterListInput, id: StringQueryOperatorInput, internal: InternalFilterInput, parent: NodeFilterInput): SiteBuildMetadata
    siteFunction(absoluteCompiledFilePath: StringQueryOperatorInput, children: NodeFilterListInput, functionRoute: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, matchPath: StringQueryOperatorInput, originalAbsoluteFilePath: StringQueryOperatorInput, originalRelativeFilePath: StringQueryOperatorInput, parent: NodeFilterInput, pluginName: StringQueryOperatorInput, relativeCompiledFilePath: StringQueryOperatorInput): SiteFunction
    sitePage(children: NodeFilterListInput, component: StringQueryOperatorInput, componentChunkName: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, internalComponentName: StringQueryOperatorInput, matchPath: StringQueryOperatorInput, pageContext: JSONQueryOperatorInput, parent: NodeFilterInput, path: StringQueryOperatorInput, pluginCreator: SitePluginFilterInput): SitePage
    sitePlugin(browserAPIs: StringQueryOperatorInput, children: NodeFilterListInput, id: StringQueryOperatorInput, internal: InternalFilterInput, name: StringQueryOperatorInput, nodeAPIs: StringQueryOperatorInput, packageJson: JSONQueryOperatorInput, parent: NodeFilterInput, pluginFilepath: StringQueryOperatorInput, pluginOptions: JSONQueryOperatorInput, resolve: StringQueryOperatorInput, ssrAPIs: StringQueryOperatorInput, version: StringQueryOperatorInput): SitePlugin
}

type Site implements Node {
    buildTime(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date
    children: [Node!]!
    graphqlTypegen: SiteGraphqlTypegen
    host: String
    id: ID!
    internal: Internal!
    jsxRuntime: String
    parent: Node
    pathPrefix: String
    polyfill: Boolean
    port: Int
    siteMetadata: SiteSiteMetadata
    trailingSlash: String
}

type SiteBuildMetadata implements Node {
    buildTime(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date
    children: [Node!]!
    id: ID!
    internal: Internal!
    parent: Node
}

type SiteBuildMetadataConnection {
    distinct(field: SiteBuildMetadataFieldSelector!): [String!]!
    edges: [SiteBuildMetadataEdge!]!
    group(field: SiteBuildMetadataFieldSelector!, limit: Int, skip: Int): [SiteBuildMetadataGroupConnection!]!
    max(field: SiteBuildMetadataFieldSelector!): Float
    min(field: SiteBuildMetadataFieldSelector!): Float
    nodes: [SiteBuildMetadata!]!
    pageInfo: PageInfo!
    sum(field: SiteBuildMetadataFieldSelector!): Float
    totalCount: Int!
}

type SiteBuildMetadataEdge {
    next: SiteBuildMetadata
    node: SiteBuildMetadata!
    previous: SiteBuildMetadata
}

type SiteBuildMetadataGroupConnection {
    distinct(field: SiteBuildMetadataFieldSelector!): [String!]!
    edges: [SiteBuildMetadataEdge!]!
    field: String!
    fieldValue: String
    group(field: SiteBuildMetadataFieldSelector!, limit: Int, skip: Int): [SiteBuildMetadataGroupConnection!]!
    max(field: SiteBuildMetadataFieldSelector!): Float
    min(field: SiteBuildMetadataFieldSelector!): Float
    nodes: [SiteBuildMetadata!]!
    pageInfo: PageInfo!
    sum(field: SiteBuildMetadataFieldSelector!): Float
    totalCount: Int!
}

type SiteConnection {
    distinct(field: SiteFieldSelector!): [String!]!
    edges: [SiteEdge!]!
    group(field: SiteFieldSelector!, limit: Int, skip: Int): [SiteGroupConnection!]!
    max(field: SiteFieldSelector!): Float
    min(field: SiteFieldSelector!): Float
    nodes: [Site!]!
    pageInfo: PageInfo!
    sum(field: SiteFieldSelector!): Float
    totalCount: Int!
}

type SiteEdge {
    next: Site
    node: Site!
    previous: Site
}

type SiteFunction implements Node {
    absoluteCompiledFilePath: String!
    children: [Node!]!
    functionRoute: String!
    id: ID!
    internal: Internal!
    matchPath: String
    originalAbsoluteFilePath: String!
    originalRelativeFilePath: String!
    parent: Node
    pluginName: String!
    relativeCompiledFilePath: String!
}

type SiteFunctionConnection {
    distinct(field: SiteFunctionFieldSelector!): [String!]!
    edges: [SiteFunctionEdge!]!
    group(field: SiteFunctionFieldSelector!, limit: Int, skip: Int): [SiteFunctionGroupConnection!]!
    max(field: SiteFunctionFieldSelector!): Float
    min(field: SiteFunctionFieldSelector!): Float
    nodes: [SiteFunction!]!
    pageInfo: PageInfo!
    sum(field: SiteFunctionFieldSelector!): Float
    totalCount: Int!
}

type SiteFunctionEdge {
    next: SiteFunction
    node: SiteFunction!
    previous: SiteFunction
}

type SiteFunctionGroupConnection {
    distinct(field: SiteFunctionFieldSelector!): [String!]!
    edges: [SiteFunctionEdge!]!
    field: String!
    fieldValue: String
    group(field: SiteFunctionFieldSelector!, limit: Int, skip: Int): [SiteFunctionGroupConnection!]!
    max(field: SiteFunctionFieldSelector!): Float
    min(field: SiteFunctionFieldSelector!): Float
    nodes: [SiteFunction!]!
    pageInfo: PageInfo!
    sum(field: SiteFunctionFieldSelector!): Float
    totalCount: Int!
}

type SiteGraphqlTypegen {
    documentSearchPaths: [String]
    generateOnBuild: Boolean
    typesOutputPath: String
}

type SiteGroupConnection {
    distinct(field: SiteFieldSelector!): [String!]!
    edges: [SiteEdge!]!
    field: String!
    fieldValue: String
    group(field: SiteFieldSelector!, limit: Int, skip: Int): [SiteGroupConnection!]!
    max(field: SiteFieldSelector!): Float
    min(field: SiteFieldSelector!): Float
    nodes: [Site!]!
    pageInfo: PageInfo!
    sum(field: SiteFieldSelector!): Float
    totalCount: Int!
}

type SitePage implements Node {
    children: [Node!]!
    component: String!
    componentChunkName: String!
    id: ID!
    internal: Internal!
    internalComponentName: String!
    matchPath: String
    pageContext: JSON
    parent: Node
    path: String!
    pluginCreator: SitePlugin
}

type SitePageConnection {
    distinct(field: SitePageFieldSelector!): [String!]!
    edges: [SitePageEdge!]!
    group(field: SitePageFieldSelector!, limit: Int, skip: Int): [SitePageGroupConnection!]!
    max(field: SitePageFieldSelector!): Float
    min(field: SitePageFieldSelector!): Float
    nodes: [SitePage!]!
    pageInfo: PageInfo!
    sum(field: SitePageFieldSelector!): Float
    totalCount: Int!
}

type SitePageEdge {
    next: SitePage
    node: SitePage!
    previous: SitePage
}

type SitePageGroupConnection {
    distinct(field: SitePageFieldSelector!): [String!]!
    edges: [SitePageEdge!]!
    field: String!
    fieldValue: String
    group(field: SitePageFieldSelector!, limit: Int, skip: Int): [SitePageGroupConnection!]!
    max(field: SitePageFieldSelector!): Float
    min(field: SitePageFieldSelector!): Float
    nodes: [SitePage!]!
    pageInfo: PageInfo!
    sum(field: SitePageFieldSelector!): Float
    totalCount: Int!
}

type SitePlugin implements Node {
    browserAPIs: [String]
    children: [Node!]!
    id: ID!
    internal: Internal!
    name: String
    nodeAPIs: [String]
    packageJson: JSON
    parent: Node
    pluginFilepath: String
    pluginOptions: JSON
    resolve: String
    ssrAPIs: [String]
    version: String
}

type SitePluginConnection {
    distinct(field: SitePluginFieldSelector!): [String!]!
    edges: [SitePluginEdge!]!
    group(field: SitePluginFieldSelector!, limit: Int, skip: Int): [SitePluginGroupConnection!]!
    max(field: SitePluginFieldSelector!): Float
    min(field: SitePluginFieldSelector!): Float
    nodes: [SitePlugin!]!
    pageInfo: PageInfo!
    sum(field: SitePluginFieldSelector!): Float
    totalCount: Int!
}

type SitePluginEdge {
    next: SitePlugin
    node: SitePlugin!
    previous: SitePlugin
}

type SitePluginGroupConnection {
    distinct(field: SitePluginFieldSelector!): [String!]!
    edges: [SitePluginEdge!]!
    field: String!
    fieldValue: String
    group(field: SitePluginFieldSelector!, limit: Int, skip: Int): [SitePluginGroupConnection!]!
    max(field: SitePluginFieldSelector!): Float
    min(field: SitePluginFieldSelector!): Float
    nodes: [SitePlugin!]!
    pageInfo: PageInfo!
    sum(field: SitePluginFieldSelector!): Float
    totalCount: Int!
}

type SiteSiteMetadata {
    description: String
    siteUrl: String
    title: String
}

enum DatoCmsAssetVideoMp4ResolutionQuality {
    high
    low
    medium
}

enum DatoCmsAssetVideoThumbnailFormat {
    gif
    jpg
    png
}

enum DatoImagePlaceholder {
    BLURRED
    DOMINANT_COLOR
    NONE
    TRACED_SVG
}

enum FieldSelectorEnum {
    SELECT
}

enum GatsbyImageFormat {
    AUTO
    AVIF
    JPG
    NO_CHANGE
    PNG
    WEBP
}

enum GatsbyImageLayout {
    CONSTRAINED
    FIXED
    FULL_WIDTH
}

enum GatsbyImagePlaceholder {
    BLURRED
    DOMINANT_COLOR
    NONE
    TRACED_SVG
}

enum ImageCropFocus {
    ATTENTION
    CENTER
    EAST
    ENTROPY
    NORTH
    NORTHEAST
    NORTHWEST
    SOUTH
    SOUTHEAST
    SOUTHWEST
    WEST
}

enum ImageFit {
    CONTAIN
    COVER
    FILL
    INSIDE
    OUTSIDE
}

enum ImageFormat {
    AUTO
    AVIF
    JPG
    NO_CHANGE
    PNG
    WEBP
}

enum ImageLayout {
    CONSTRAINED
    FIXED
    FULL_WIDTH
}

enum ImagePlaceholder {
    BLURRED
    DOMINANT_COLOR
    NONE
    TRACED_SVG
}

enum PotraceTurnPolicy {
    TURNPOLICY_BLACK
    TURNPOLICY_LEFT
    TURNPOLICY_MAJORITY
    TURNPOLICY_MINORITY
    TURNPOLICY_RIGHT
    TURNPOLICY_WHITE
}

enum SortOrderEnum {
    ASC
    DESC
}

"A date string, such as 2007-12-03, compliant with the ISO 8601 standard for representation of dates and times using the Gregorian calendar."
scalar Date

scalar GatsbyImageData

"The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf)."
scalar JSON

input AVIFOptions {
    lossless: Boolean
    quality: Int
    speed: Int
}

input BlurredOptions {
    "Force the output format for the low-res preview. Default is to use the same format as the input. You should rarely need to change this"
    toFormat: ImageFormat
    "Width of the generated low-res preview. Default is 20px"
    width: Int
}

input BooleanQueryOperatorInput {
    eq: Boolean
    in: [Boolean]
    ne: Boolean
    nin: [Boolean]
}

input DateQueryOperatorInput {
    eq: Date
    gt: Date
    gte: Date
    in: [Date]
    lt: Date
    lte: Date
    ne: Date
    nin: [Date]
}

input DatoCmsAssetFieldSelector {
    author: FieldSelectorEnum
    basename: FieldSelectorEnum
    blurhash: FieldSelectorEnum
    children: NodeFieldSelector
    colors: DatoCmsColorFieldFieldSelector
    copyright: FieldSelectorEnum
    createdAt: FieldSelectorEnum
    exifInfo: FieldSelectorEnum
    filename: FieldSelectorEnum
    fixed: DatoCmsFixedFieldSelector
    fluid: DatoCmsFluidFieldSelector
    format: FieldSelectorEnum
    gatsbyImageData: FieldSelectorEnum
    height: FieldSelectorEnum
    id: FieldSelectorEnum
    internal: InternalFieldSelector
    isImage: FieldSelectorEnum
    mimeType: FieldSelectorEnum
    notes: FieldSelectorEnum
    originalId: FieldSelectorEnum
    parent: NodeFieldSelector
    path: FieldSelectorEnum
    resolutions: DatoCmsFixedFieldSelector
    size: FieldSelectorEnum
    sizes: DatoCmsFluidFieldSelector
    smartTags: FieldSelectorEnum
    tags: FieldSelectorEnum
    url: FieldSelectorEnum
    video: DatoCmsAssetVideoFieldSelector
    width: FieldSelectorEnum
}

input DatoCmsAssetFilterInput {
    author: StringQueryOperatorInput
    basename: StringQueryOperatorInput
    blurhash: StringQueryOperatorInput
    children: NodeFilterListInput
    colors: DatoCmsColorFieldFilterListInput
    copyright: StringQueryOperatorInput
    createdAt: DateQueryOperatorInput
    exifInfo: JSONQueryOperatorInput
    filename: StringQueryOperatorInput
    fixed: DatoCmsFixedFilterInput
    fluid: DatoCmsFluidFilterInput
    format: StringQueryOperatorInput
    gatsbyImageData: JSONQueryOperatorInput
    height: IntQueryOperatorInput
    id: StringQueryOperatorInput
    internal: InternalFilterInput
    isImage: BooleanQueryOperatorInput
    mimeType: StringQueryOperatorInput
    notes: StringQueryOperatorInput
    originalId: StringQueryOperatorInput
    parent: NodeFilterInput
    path: StringQueryOperatorInput
    resolutions: DatoCmsFixedFilterInput
    size: IntQueryOperatorInput
    sizes: DatoCmsFluidFilterInput
    smartTags: StringQueryOperatorInput
    tags: StringQueryOperatorInput
    url: StringQueryOperatorInput
    video: DatoCmsAssetVideoFilterInput
    width: IntQueryOperatorInput
}

input DatoCmsAssetSortInput {
    author: SortOrderEnum
    basename: SortOrderEnum
    blurhash: SortOrderEnum
    children: NodeSortInput
    colors: DatoCmsColorFieldSortInput
    copyright: SortOrderEnum
    createdAt: SortOrderEnum
    exifInfo: SortOrderEnum
    filename: SortOrderEnum
    fixed: DatoCmsFixedSortInput
    fluid: DatoCmsFluidSortInput
    format: SortOrderEnum
    gatsbyImageData: SortOrderEnum
    height: SortOrderEnum
    id: SortOrderEnum
    internal: InternalSortInput
    isImage: SortOrderEnum
    mimeType: SortOrderEnum
    notes: SortOrderEnum
    originalId: SortOrderEnum
    parent: NodeSortInput
    path: SortOrderEnum
    resolutions: DatoCmsFixedSortInput
    size: SortOrderEnum
    sizes: DatoCmsFluidSortInput
    smartTags: SortOrderEnum
    tags: SortOrderEnum
    url: SortOrderEnum
    video: DatoCmsAssetVideoSortInput
    width: SortOrderEnum
}

input DatoCmsAssetVideoFieldSelector {
    duration: FieldSelectorEnum
    frameRate: FieldSelectorEnum
    mp4Url: FieldSelectorEnum
    muxPlaybackId: FieldSelectorEnum
    streamingUrl: FieldSelectorEnum
    thumbnailUrl: FieldSelectorEnum
}

input DatoCmsAssetVideoFilterInput {
    duration: IntQueryOperatorInput
    frameRate: IntQueryOperatorInput
    mp4Url: StringQueryOperatorInput
    muxPlaybackId: StringQueryOperatorInput
    streamingUrl: StringQueryOperatorInput
    thumbnailUrl: StringQueryOperatorInput
}

input DatoCmsAssetVideoSortInput {
    duration: SortOrderEnum
    frameRate: SortOrderEnum
    mp4Url: SortOrderEnum
    muxPlaybackId: SortOrderEnum
    streamingUrl: SortOrderEnum
    thumbnailUrl: SortOrderEnum
}

input DatoCmsColorFieldFieldSelector {
    alpha: FieldSelectorEnum
    blue: FieldSelectorEnum
    green: FieldSelectorEnum
    hex: FieldSelectorEnum
    red: FieldSelectorEnum
    rgb: FieldSelectorEnum
}

input DatoCmsColorFieldFilterInput {
    alpha: IntQueryOperatorInput
    blue: IntQueryOperatorInput
    green: IntQueryOperatorInput
    hex: StringQueryOperatorInput
    red: IntQueryOperatorInput
    rgb: StringQueryOperatorInput
}

input DatoCmsColorFieldFilterListInput {
    elemMatch: DatoCmsColorFieldFilterInput
}

input DatoCmsColorFieldSortInput {
    alpha: SortOrderEnum
    blue: SortOrderEnum
    green: SortOrderEnum
    hex: SortOrderEnum
    red: SortOrderEnum
    rgb: SortOrderEnum
}

input DatoCmsFaviconMetaTagsFieldSelector {
    tags: FieldSelectorEnum
}

input DatoCmsFaviconMetaTagsFilterInput {
    tags: JSONQueryOperatorInput
}

input DatoCmsFaviconMetaTagsSortInput {
    tags: SortOrderEnum
}

input DatoCmsFieldFieldSelector {
    apiKey: FieldSelectorEnum
    appeareance: FieldSelectorEnum
    children: NodeFieldSelector
    defaultValue: FieldSelectorEnum
    fieldType: FieldSelectorEnum
    id: FieldSelectorEnum
    internal: InternalFieldSelector
    label: FieldSelectorEnum
    localized: FieldSelectorEnum
    originalId: FieldSelectorEnum
    parent: NodeFieldSelector
    position: FieldSelectorEnum
    validators: FieldSelectorEnum
}

input DatoCmsFieldFilterInput {
    apiKey: StringQueryOperatorInput
    appeareance: JSONQueryOperatorInput
    children: NodeFilterListInput
    defaultValue: JSONQueryOperatorInput
    fieldType: StringQueryOperatorInput
    id: StringQueryOperatorInput
    internal: InternalFilterInput
    label: StringQueryOperatorInput
    localized: BooleanQueryOperatorInput
    originalId: StringQueryOperatorInput
    parent: NodeFilterInput
    position: IntQueryOperatorInput
    validators: JSONQueryOperatorInput
}

input DatoCmsFieldFilterListInput {
    elemMatch: DatoCmsFieldFilterInput
}

input DatoCmsFieldSortInput {
    apiKey: SortOrderEnum
    appeareance: SortOrderEnum
    children: NodeSortInput
    defaultValue: SortOrderEnum
    fieldType: SortOrderEnum
    id: SortOrderEnum
    internal: InternalSortInput
    label: SortOrderEnum
    localized: SortOrderEnum
    originalId: SortOrderEnum
    parent: NodeSortInput
    position: SortOrderEnum
    validators: SortOrderEnum
}

input DatoCmsFixedFieldSelector {
    aspectRatio: FieldSelectorEnum
    base64: FieldSelectorEnum
    height: FieldSelectorEnum
    sizes: FieldSelectorEnum
    src: FieldSelectorEnum
    srcSet: FieldSelectorEnum
    tracedSVG: FieldSelectorEnum
    width: FieldSelectorEnum
}

input DatoCmsFixedFilterInput {
    aspectRatio: FloatQueryOperatorInput
    base64: StringQueryOperatorInput
    height: IntQueryOperatorInput
    sizes: StringQueryOperatorInput
    src: StringQueryOperatorInput
    srcSet: StringQueryOperatorInput
    tracedSVG: StringQueryOperatorInput
    width: IntQueryOperatorInput
}

input DatoCmsFixedSortInput {
    aspectRatio: SortOrderEnum
    base64: SortOrderEnum
    height: SortOrderEnum
    sizes: SortOrderEnum
    src: SortOrderEnum
    srcSet: SortOrderEnum
    tracedSVG: SortOrderEnum
    width: SortOrderEnum
}

input DatoCmsFluidFieldSelector {
    aspectRatio: FieldSelectorEnum
    base64: FieldSelectorEnum
    height: FieldSelectorEnum
    sizes: FieldSelectorEnum
    src: FieldSelectorEnum
    srcSet: FieldSelectorEnum
    tracedSVG: FieldSelectorEnum
    width: FieldSelectorEnum
}

input DatoCmsFluidFilterInput {
    aspectRatio: FloatQueryOperatorInput
    base64: StringQueryOperatorInput
    height: IntQueryOperatorInput
    sizes: StringQueryOperatorInput
    src: StringQueryOperatorInput
    srcSet: StringQueryOperatorInput
    tracedSVG: StringQueryOperatorInput
    width: IntQueryOperatorInput
}

input DatoCmsFluidSortInput {
    aspectRatio: SortOrderEnum
    base64: SortOrderEnum
    height: SortOrderEnum
    sizes: SortOrderEnum
    src: SortOrderEnum
    srcSet: SortOrderEnum
    tracedSVG: SortOrderEnum
    width: SortOrderEnum
}

input DatoCmsGlobalSeoFieldSelector {
    facebookPageUrl: FieldSelectorEnum
    fallbackSeo: DatoCmsSeoFieldFieldSelector
    siteName: FieldSelectorEnum
    titleSuffix: FieldSelectorEnum
    twitterAccount: FieldSelectorEnum
}

input DatoCmsGlobalSeoFilterInput {
    facebookPageUrl: StringQueryOperatorInput
    fallbackSeo: DatoCmsSeoFieldFilterInput
    siteName: StringQueryOperatorInput
    titleSuffix: StringQueryOperatorInput
    twitterAccount: StringQueryOperatorInput
}

input DatoCmsGlobalSeoSortInput {
    facebookPageUrl: SortOrderEnum
    fallbackSeo: DatoCmsSeoFieldSortInput
    siteName: SortOrderEnum
    titleSuffix: SortOrderEnum
    twitterAccount: SortOrderEnum
}

input DatoCmsImgixParams {
    "Specifies an aspect ratio to maintain when resizing and cropping the image (https://docs.imgix.com/apis/url/size/ar)"
    ar: String
    "Applies automatic enhancements to images. (https://docs.imgix.com/apis/url/auto)"
    auto: String
    "Colors the background of padded and partially-transparent images. (https://docs.imgix.com/apis/url/bg)"
    bg: String
    "Removes background from image. (https://docs.imgix.com/apis/rendering/background-removal/bg-remove)"
    bgRemove: Boolean
    "Overrides default fallback behavior for bg-remove failures. (https://docs.imgix.com/apis/rendering/background-removal/bg-remove)"
    bgRemoveFallback: Boolean
    "Specifies the location of the blend image. (https://docs.imgix.com/apis/url/blending/blend)"
    blend: String
    "Changes the blend alignment relative to the parent image. (https://docs.imgix.com/apis/url/blending/blend-align)"
    blendAlign: String
    "Changes the alpha of the blend image. (https://docs.imgix.com/apis/url/blending/blend-alpha)"
    blendAlpha: Int
    "Specifies a color to use when applying the blend. (https://docs.imgix.com/apis/url/blending/blend-color)"
    blendColor: String
    "Specifies the type of crop for blend images. (https://docs.imgix.com/apis/url/blending/blend-crop)"
    blendCrop: String
    "Specifies the fit mode for blend images. (https://docs.imgix.com/apis/url/blending/blend-fit)"
    blendFit: String
    "Adjusts the height of the blend image. (https://docs.imgix.com/apis/url/blending/blend-h)"
    blendH: String
    "Sets the blend mode for a blend image. (https://docs.imgix.com/apis/url/blending/blend-mode)"
    blendMode: String
    "Applies padding to the blend image. (https://docs.imgix.com/apis/url/blending/blend-pad)"
    blendPad: Int
    "Adjusts the size of the blend image. (https://docs.imgix.com/apis/url/blending/blend-size)"
    blendSize: String
    "Adjusts the width of the blend image. (https://docs.imgix.com/apis/url/blending/blend-w)"
    blendW: String
    "Adjusts the x-offset of the blend image relative to its parent. (https://docs.imgix.com/apis/url/blending/blend-x)"
    blendX: Int
    "Adjusts the y-offset of the blend image relative to its parent. (https://docs.imgix.com/apis/url/blending/blend-y)"
    blendY: Int
    "Applies a gaussian blur to an image. (https://docs.imgix.com/apis/url/stylize/blur)"
    blur: Int
    "Applies a border to an image. (https://docs.imgix.com/apis/url/border-and-padding/border)"
    border: String
    "Sets bottom border of an image. (https://docs.imgix.com/apis/url/border-and-padding/border-bottom)"
    borderBottom: Int
    "Sets left border of an image. (https://docs.imgix.com/apis/url/border-and-padding/border-left)"
    borderLeft: Int
    "Sets the outer radius of the image's border in pixels. (https://docs.imgix.com/apis/url/border-and-padding/border-radius)"
    borderRadius: String
    "Sets the inner radius of the image's border in pixels. (https://docs.imgix.com/apis/url/border-and-padding/border-radius-inner)"
    borderRadiusInner: String
    "Sets right border of an image. (https://docs.imgix.com/apis/url/border-and-padding/border-right)"
    borderRight: Int
    "Sets top border of an image. (https://docs.imgix.com/apis/url/border-and-padding/border-top)"
    borderTop: Int
    "Adjusts the brightness of the source image. (https://docs.imgix.com/apis/url/adjustment/bri)"
    bri: Int
    "Sets one or more Client-Hints headers (https://docs.imgix.com/apis/url/format/ch)"
    ch: String
    "Specifies the output chroma subsampling rate. (https://docs.imgix.com/apis/url/format/chromasub)"
    chromasub: Int
    "Limits the number of unique colors in an image. (https://docs.imgix.com/apis/url/format/colorquant)"
    colorquant: Int
    "Specifies how many colors to include in a palette-extraction response. (https://docs.imgix.com/apis/url/color-palette/colors)"
    colors: Int
    "Adjusts the contrast of the source image. (https://docs.imgix.com/apis/url/adjustment/con)"
    con: Int
    "Specifies the radius value for a rounded corner mask. (https://docs.imgix.com/apis/url/mask/corner-radius)"
    cornerRadius: String
    "Specifies how to crop an image. (https://docs.imgix.com/apis/url/size/crop)"
    crop: String
    "Specifies the color space of the output image. (https://docs.imgix.com/apis/url/format/cs)"
    cs: String
    "Forces a URL to use send-file in its response. (https://docs.imgix.com/apis/url/format/dl)"
    dl: String
    "Sets the DPI value in the EXIF header. (https://docs.imgix.com/apis/url/format/dpi)"
    dpi: Int
    "Adjusts the device-pixel ratio of the output image. (https://docs.imgix.com/apis/url/dpr)"
    dpr: Float
    "Applies a duotone effect to the source image. (https://docs.imgix.com/apis/url/stylize/duotone)"
    duotone: String
    "Changes the alpha of the duotone effect atop the source image. (https://docs.imgix.com/apis/url/stylize/duotone-alpha)"
    duotoneAlpha: Int
    "Adjusts the exposure of the output image. (https://docs.imgix.com/apis/url/adjustment/exp)"
    exp: Int
    "A Unix timestamp specifying a UTC time. Requests made to this URL after that time will output a 404 status code. (https://docs.imgix.com/apis/url/expires)"
    expires: String
    "Selects a face to crop to. (https://docs.imgix.com/apis/url/face-detection/faceindex)"
    faceindex: Int
    "Adjusts padding around a selected face. (https://docs.imgix.com/apis/url/face-detection/facepad)"
    facepad: Float
    "Specifies that face data should be included in output when combined with `fm=json`. (https://docs.imgix.com/apis/url/face-detection/faces)"
    faces: Int
    "Determines how to fill in additional space created by the fit setting (https://docs.imgix.com/apis/url/fill/fill)"
    fill: String
    "Sets the fill color for images with additional space created by the fit setting (https://docs.imgix.com/apis/url/fill/fill-color)"
    fillColor: String
    "Specifies how to map the source image to the output image dimensions. (https://docs.imgix.com/apis/url/size/fit)"
    fit: String
    "Flips an image on a specified axis. (https://docs.imgix.com/apis/url/rotation/flip)"
    flip: String
    "Changes the format of the output image. (https://docs.imgix.com/apis/url/format/fm)"
    fm: String
    "Displays crosshairs identifying the location of the set focal point (https://docs.imgix.com/apis/url/focalpoint-crop/fp-debug)"
    fpDebug: Boolean
    "Sets the relative horizontal value for the focal point of an image (https://docs.imgix.com/apis/url/focalpoint-crop/fp-x)"
    fpX: Float
    "Sets the relative vertical value for the focal point of an image (https://docs.imgix.com/apis/url/focalpoint-crop/fp-y)"
    fpY: Float
    "Sets the relative zoom value for the focal point of an image (https://docs.imgix.com/apis/url/focalpoint-crop/fp-z)"
    fpZ: Float
    "Specifies the framerate of the generated image. (undefined)"
    fps: Int
    "Specifies the frame of an animated image to use. (undefined)"
    frame: String
    "Adjusts the gamma of the source image. (https://docs.imgix.com/apis/url/adjustment/gam)"
    gam: Int
    "undefined (undefined)"
    gifQ: Int
    "Sets grid colors for the transparency checkerboard grid. (undefined)"
    gridColors: String
    "Sets grid size for the transparency checkerboard grid. (undefined)"
    gridSize: Int
    "Adjusts the height of the output image. (https://docs.imgix.com/apis/url/size/h)"
    h: String
    "Adjusts the highlights of the source image. (https://docs.imgix.com/apis/url/adjustment/high)"
    high: Int
    "Applies a half-tone effect to the source image. (https://docs.imgix.com/apis/url/stylize/htn)"
    htn: Int
    "Adjusts the hue of the source image. (https://docs.imgix.com/apis/url/adjustment/hue)"
    hue: Int
    "Displays every Nth frame starting with the first frame. (undefined)"
    interval: Int
    "Inverts the colors on the source image. (https://docs.imgix.com/apis/url/adjustment/invert)"
    invert: Boolean
    "Determine if IPTC data should be passed for JPEG images. (undefined)"
    iptc: String
    "Specifies the number of times an animated image should repeat. A value of 0 means infinite looping. (undefined)"
    loop: Int
    "Specifies that the output image should be a lossless variant. (https://docs.imgix.com/apis/url/format/lossless)"
    lossless: Boolean
    "Specifies the location of the watermark image. (https://docs.imgix.com/apis/url/watermark/mark)"
    mark: String
    "Changes the watermark alignment relative to the parent image. (https://docs.imgix.com/apis/url/watermark/mark-align)"
    markAlign: String
    "Changes the alpha of the watermark image. (https://docs.imgix.com/apis/url/watermark/mark-alpha)"
    markAlpha: Int
    "Changes base URL of the watermark image. (https://docs.imgix.com/apis/url/watermark/mark-base)"
    markBase: String
    "Specifies the fit mode for watermark images. (https://docs.imgix.com/apis/url/watermark/mark-fit)"
    markFit: String
    "Adjusts the height of the watermark image. (https://docs.imgix.com/apis/url/watermark/mark-h)"
    markH: String
    "Applies padding to the watermark image. (https://docs.imgix.com/apis/url/watermark/mark-pad)"
    markPad: Int
    "Rotates a watermark or tiled watermarks by a specified number of degrees. (https://docs.imgix.com/apis/url/watermark/mark-rot)"
    markRot: Float
    "Adjusts the scale of the watermark image. (https://docs.imgix.com/apis/url/watermark/mark-scale)"
    markScale: Int
    "Adds tiled watermark. (https://docs.imgix.com/apis/url/watermark/mark-tile)"
    markTile: String
    "Adjusts the width of the watermark image. (https://docs.imgix.com/apis/url/watermark/mark-w)"
    markW: String
    "Adjusts the x-offset of the watermark image relative to its parent. (https://docs.imgix.com/apis/url/watermark/mark-x)"
    markX: Int
    "Adjusts the y-offset of the watermark image relative to its parent. (https://docs.imgix.com/apis/url/watermark/mark-y)"
    markY: Int
    "Defines the type of mask and specifies the URL if that type is selected. (https://docs.imgix.com/apis/url/mask)"
    mask: String
    "Colors the background of the transparent mask area of images (https://docs.imgix.com/apis/url/mask/mask-bg)"
    maskBg: String
    "Specifies the maximum height of the output image in pixels. (https://docs.imgix.com/apis/url/size/max-height)"
    maxH: Int
    "Specifies the maximum width of the output image in pixels. (https://docs.imgix.com/apis/url/size/max-width)"
    maxW: Int
    "Specifies the minimum height of the output image in pixels. (https://docs.imgix.com/apis/url/size/min-height)"
    minH: Int
    "Specifies the minimum width of the output image in pixels. (https://docs.imgix.com/apis/url/size/min-width)"
    minW: Int
    "Applies a monochrome effect to the source image. (https://docs.imgix.com/apis/url/stylize/monochrome)"
    monochrome: String
    "Reduces the noise in an image. (https://docs.imgix.com/apis/url/noise-reduction/nr)"
    nr: Int
    "Provides a threshold by which to sharpen an image. (https://docs.imgix.com/apis/url/noise-reduction/nrs)"
    nrs: Int
    "Changes the image orientation. (https://docs.imgix.com/apis/url/rotation/orient)"
    orient: Int
    "Pads an image. (https://docs.imgix.com/apis/url/border-and-padding/pad)"
    pad: Int
    "Sets bottom padding of an image. (https://docs.imgix.com/apis/url/border-and-padding/pad-bottom)"
    padBottom: Int
    "Sets left padding of an image. (https://docs.imgix.com/apis/url/border-and-padding/pad-left)"
    padLeft: Int
    "Sets right padding of an image. (https://docs.imgix.com/apis/url/border-and-padding/pad-right)"
    padRight: Int
    "Sets top padding of an image. (https://docs.imgix.com/apis/url/border-and-padding/pad-top)"
    padTop: Int
    "Selects a page from a PDF for display. (https://docs.imgix.com/apis/url/pdf/page)"
    page: Int
    "Specifies an output format for palette-extraction. (https://docs.imgix.com/apis/url/color-palette/palette)"
    palette: String
    "Enables or disables PDF annotation. (https://docs.imgix.com/apis/url/pdf/pdf-annotation)"
    pdfAnnotation: Boolean
    "Specifies a CSS prefix for all classes in palette-extraction. (https://docs.imgix.com/apis/url/color-palette/prefix)"
    prefix: String
    "Applies a pixelation effect to an image. (https://docs.imgix.com/apis/url/stylize/px)"
    px: Int
    "Adjusts the quality of an output image. (https://docs.imgix.com/apis/url/format/q)"
    q: Int
    "Crops an image to a specified rectangle. (https://docs.imgix.com/apis/url/size/rect)"
    rect: String
    "Reverses the frame order on the source animation. (undefined)"
    reverse: Boolean
    "Rotates an image by a specified number of degrees. (https://docs.imgix.com/apis/url/rotation/rot)"
    rot: Float
    "Adjusts the saturation of an image. (https://docs.imgix.com/apis/url/adjustment/sat)"
    sat: Int
    "Applies a sepia effect to an image. (https://docs.imgix.com/apis/url/stylize/sepia)"
    sepia: Int
    "Adjusts the highlights of the source image. (https://docs.imgix.com/apis/url/adjustment/shad)"
    shad: Float
    "Adjusts the sharpness of the source image. (https://docs.imgix.com/apis/url/adjustment/sharp)"
    sharp: Float
    "Skips every Nth frame starting with the first frame. (undefined)"
    skip: Int
    "Adds checkerboard behind images which support transparency. (https://docs.imgix.com/apis/url/fill/transparency)"
    transparency: String
    "Trims the source image. (https://docs.imgix.com/apis/url/trim/trim)"
    trim: String
    "Specifies a trim color on a trim operation. (https://docs.imgix.com/apis/url/trim/trim-color)"
    trimColor: String
    "Specifies the mean difference on a trim operation. (https://docs.imgix.com/apis/url/trim/trim-md)"
    trimMd: Float
    "Pads the area of the source image before trimming. (https://docs.imgix.com/apis/url/trim/trim-pad)"
    trimPad: Int
    "Specifies the standard deviation on a trim operation. (https://docs.imgix.com/apis/url/trim/trim-sd)"
    trimSd: Float
    "Specifies the tolerance on a trim operation. (https://docs.imgix.com/apis/url/trim/trim-tol)"
    trimTol: Float
    "Sets the text string to render. (https://docs.imgix.com/apis/url/text/txt)"
    txt: String
    "Sets the vertical and horizontal alignment of rendered text relative to the base image. (https://docs.imgix.com/apis/url/text/txt-align)"
    txtAlign: String
    "Sets the clipping properties of rendered text. (https://docs.imgix.com/apis/url/text/txt-clip)"
    txtClip: String
    "Specifies the color of rendered text. (https://docs.imgix.com/apis/url/text/txt-color)"
    txtColor: String
    "Specifies the fit approach for rendered text. (https://docs.imgix.com/apis/url/text/txt-fit)"
    txtFit: String
    "Selects a font for rendered text. (https://docs.imgix.com/apis/url/text/txt-font)"
    txtFont: String
    "Sets the leading (line spacing) for rendered text. Only works on the multi-line text endpoint. (https://docs.imgix.com/apis/url/typesetting/txt-lead)"
    txtLead: Int
    "Controls the level of ligature substitution (https://docs.imgix.com/apis/url/text/txt-lig)"
    txtLig: Int
    "Outlines the rendered text with a specified color. (https://docs.imgix.com/apis/url/text/txt-line)"
    txtLine: Int
    "Specifies a text outline color. (https://docs.imgix.com/apis/url/text/txt-line-color)"
    txtLineColor: String
    "Specifies the padding (in device-independent pixels) between a textbox and the edges of the base image. (https://docs.imgix.com/apis/url/text/txt-pad)"
    txtPad: Int
    "Applies a shadow to rendered text. (https://docs.imgix.com/apis/url/text/txt-shad)"
    txtShad: Float
    "Sets the font size of rendered text. (https://docs.imgix.com/apis/url/text/txt-size)"
    txtSize: Int
    "Sets the tracking (letter spacing) for rendered text. Only works on the multi-line text endpoint. (https://docs.imgix.com/apis/url/typesetting/txt-track)"
    txtTrack: Int
    "Sets the width of rendered text. (https://docs.imgix.com/apis/url/text/txt-width)"
    txtWidth: Int
    "Sets the horizontal (x) position of the text in pixels relative to the left edge of the base image. (https://docs.imgix.com/apis/url/text/txt-x)"
    txtX: Int
    "Sets the vertical (y) position of the text in pixels relative to the top edge of the base image. (https://docs.imgix.com/apis/url/text/txt-y)"
    txtY: Int
    "Sharpens the source image using an unsharp mask. (https://docs.imgix.com/apis/url/adjustment/usm)"
    usm: Int
    "Specifies the radius for an unsharp mask operation. (https://docs.imgix.com/apis/url/adjustment/usmrad)"
    usmrad: Float
    "Adjusts the vibrance of an image. (https://docs.imgix.com/apis/url/adjustment/vib)"
    vib: Int
    "Adjusts the width of the output image. (https://docs.imgix.com/apis/url/size/w)"
    w: String
}

input DatoCmsModelFieldSelector {
    allLocalesRequired: FieldSelectorEnum
    apiKey: FieldSelectorEnum
    children: NodeFieldSelector
    collectionAppeareance: FieldSelectorEnum
    draftModeActive: FieldSelectorEnum
    fields: DatoCmsFieldFieldSelector
    hasSingletonItem: FieldSelectorEnum
    id: FieldSelectorEnum
    internal: InternalFieldSelector
    modularBlock: FieldSelectorEnum
    name: FieldSelectorEnum
    orderingDirection: FieldSelectorEnum
    originalId: FieldSelectorEnum
    parent: NodeFieldSelector
    singleton: FieldSelectorEnum
    sortable: FieldSelectorEnum
    tree: FieldSelectorEnum
}

input DatoCmsModelFilterInput {
    allLocalesRequired: BooleanQueryOperatorInput
    apiKey: StringQueryOperatorInput
    children: NodeFilterListInput
    collectionAppeareance: StringQueryOperatorInput
    draftModeActive: BooleanQueryOperatorInput
    fields: DatoCmsFieldFilterListInput
    hasSingletonItem: BooleanQueryOperatorInput
    id: StringQueryOperatorInput
    internal: InternalFilterInput
    modularBlock: BooleanQueryOperatorInput
    name: StringQueryOperatorInput
    orderingDirection: StringQueryOperatorInput
    originalId: StringQueryOperatorInput
    parent: NodeFilterInput
    singleton: BooleanQueryOperatorInput
    sortable: BooleanQueryOperatorInput
    tree: BooleanQueryOperatorInput
}

input DatoCmsModelSortInput {
    allLocalesRequired: SortOrderEnum
    apiKey: SortOrderEnum
    children: NodeSortInput
    collectionAppeareance: SortOrderEnum
    draftModeActive: SortOrderEnum
    fields: DatoCmsFieldSortInput
    hasSingletonItem: SortOrderEnum
    id: SortOrderEnum
    internal: InternalSortInput
    modularBlock: SortOrderEnum
    name: SortOrderEnum
    orderingDirection: SortOrderEnum
    originalId: SortOrderEnum
    parent: NodeSortInput
    singleton: SortOrderEnum
    sortable: SortOrderEnum
    tree: SortOrderEnum
}

input DatoCmsSeoFieldFieldSelector {
    description: FieldSelectorEnum
    image: DatoCmsAssetFieldSelector
    title: FieldSelectorEnum
    twitterCard: FieldSelectorEnum
}

input DatoCmsSeoFieldFilterInput {
    description: StringQueryOperatorInput
    image: DatoCmsAssetFilterInput
    title: StringQueryOperatorInput
    twitterCard: StringQueryOperatorInput
}

input DatoCmsSeoFieldSortInput {
    description: SortOrderEnum
    image: DatoCmsAssetSortInput
    title: SortOrderEnum
    twitterCard: SortOrderEnum
}

input DatoCmsSiteFieldSelector {
    children: NodeFieldSelector
    domain: FieldSelectorEnum
    faviconMetaTags: DatoCmsFaviconMetaTagsFieldSelector
    globalSeo: DatoCmsGlobalSeoFieldSelector
    id: FieldSelectorEnum
    internal: InternalFieldSelector
    internalDomain: FieldSelectorEnum
    locales: FieldSelectorEnum
    name: FieldSelectorEnum
    noIndex: FieldSelectorEnum
    originalId: FieldSelectorEnum
    parent: NodeFieldSelector
}

input DatoCmsSiteFilterInput {
    children: NodeFilterListInput
    domain: StringQueryOperatorInput
    faviconMetaTags: DatoCmsFaviconMetaTagsFilterInput
    globalSeo: DatoCmsGlobalSeoFilterInput
    id: StringQueryOperatorInput
    internal: InternalFilterInput
    internalDomain: StringQueryOperatorInput
    locales: StringQueryOperatorInput
    name: StringQueryOperatorInput
    noIndex: BooleanQueryOperatorInput
    originalId: StringQueryOperatorInput
    parent: NodeFilterInput
}

input DatoCmsSiteSortInput {
    children: NodeSortInput
    domain: SortOrderEnum
    faviconMetaTags: DatoCmsFaviconMetaTagsSortInput
    globalSeo: DatoCmsGlobalSeoSortInput
    id: SortOrderEnum
    internal: InternalSortInput
    internalDomain: SortOrderEnum
    locales: SortOrderEnum
    name: SortOrderEnum
    noIndex: SortOrderEnum
    originalId: SortOrderEnum
    parent: NodeSortInput
}

input DatoCmsTextNodeFieldSelector {
    children: NodeFieldSelector
    id: FieldSelectorEnum
    internal: InternalFieldSelector
    parent: NodeFieldSelector
}

input DatoCmsTextNodeFilterInput {
    children: NodeFilterListInput
    id: StringQueryOperatorInput
    internal: InternalFilterInput
    parent: NodeFilterInput
}

input DatoCmsTextNodeSortInput {
    children: NodeSortInput
    id: SortOrderEnum
    internal: InternalSortInput
    parent: NodeSortInput
}

input DirectoryFieldSelector {
    absolutePath: FieldSelectorEnum
    accessTime: FieldSelectorEnum
    atime: FieldSelectorEnum
    atimeMs: FieldSelectorEnum
    base: FieldSelectorEnum
    birthTime: FieldSelectorEnum
    birthtime: FieldSelectorEnum
    birthtimeMs: FieldSelectorEnum
    changeTime: FieldSelectorEnum
    children: NodeFieldSelector
    ctime: FieldSelectorEnum
    ctimeMs: FieldSelectorEnum
    dev: FieldSelectorEnum
    dir: FieldSelectorEnum
    ext: FieldSelectorEnum
    extension: FieldSelectorEnum
    gid: FieldSelectorEnum
    id: FieldSelectorEnum
    ino: FieldSelectorEnum
    internal: InternalFieldSelector
    mode: FieldSelectorEnum
    modifiedTime: FieldSelectorEnum
    mtime: FieldSelectorEnum
    mtimeMs: FieldSelectorEnum
    name: FieldSelectorEnum
    nlink: FieldSelectorEnum
    parent: NodeFieldSelector
    prettySize: FieldSelectorEnum
    rdev: FieldSelectorEnum
    relativeDirectory: FieldSelectorEnum
    relativePath: FieldSelectorEnum
    root: FieldSelectorEnum
    size: FieldSelectorEnum
    sourceInstanceName: FieldSelectorEnum
    uid: FieldSelectorEnum
}

input DirectoryFilterInput {
    absolutePath: StringQueryOperatorInput
    accessTime: DateQueryOperatorInput
    atime: DateQueryOperatorInput
    atimeMs: FloatQueryOperatorInput
    base: StringQueryOperatorInput
    birthTime: DateQueryOperatorInput
    birthtime: DateQueryOperatorInput
    birthtimeMs: FloatQueryOperatorInput
    changeTime: DateQueryOperatorInput
    children: NodeFilterListInput
    ctime: DateQueryOperatorInput
    ctimeMs: FloatQueryOperatorInput
    dev: IntQueryOperatorInput
    dir: StringQueryOperatorInput
    ext: StringQueryOperatorInput
    extension: StringQueryOperatorInput
    gid: IntQueryOperatorInput
    id: StringQueryOperatorInput
    ino: FloatQueryOperatorInput
    internal: InternalFilterInput
    mode: IntQueryOperatorInput
    modifiedTime: DateQueryOperatorInput
    mtime: DateQueryOperatorInput
    mtimeMs: FloatQueryOperatorInput
    name: StringQueryOperatorInput
    nlink: IntQueryOperatorInput
    parent: NodeFilterInput
    prettySize: StringQueryOperatorInput
    rdev: IntQueryOperatorInput
    relativeDirectory: StringQueryOperatorInput
    relativePath: StringQueryOperatorInput
    root: StringQueryOperatorInput
    size: IntQueryOperatorInput
    sourceInstanceName: StringQueryOperatorInput
    uid: IntQueryOperatorInput
}

input DirectorySortInput {
    absolutePath: SortOrderEnum
    accessTime: SortOrderEnum
    atime: SortOrderEnum
    atimeMs: SortOrderEnum
    base: SortOrderEnum
    birthTime: SortOrderEnum
    birthtime: SortOrderEnum
    birthtimeMs: SortOrderEnum
    changeTime: SortOrderEnum
    children: NodeSortInput
    ctime: SortOrderEnum
    ctimeMs: SortOrderEnum
    dev: SortOrderEnum
    dir: SortOrderEnum
    ext: SortOrderEnum
    extension: SortOrderEnum
    gid: SortOrderEnum
    id: SortOrderEnum
    ino: SortOrderEnum
    internal: InternalSortInput
    mode: SortOrderEnum
    modifiedTime: SortOrderEnum
    mtime: SortOrderEnum
    mtimeMs: SortOrderEnum
    name: SortOrderEnum
    nlink: SortOrderEnum
    parent: NodeSortInput
    prettySize: SortOrderEnum
    rdev: SortOrderEnum
    relativeDirectory: SortOrderEnum
    relativePath: SortOrderEnum
    root: SortOrderEnum
    size: SortOrderEnum
    sourceInstanceName: SortOrderEnum
    uid: SortOrderEnum
}

input DuotoneGradient {
    highlight: String!
    opacity: Int
    shadow: String!
}

input FileFieldSelector {
    absolutePath: FieldSelectorEnum
    accessTime: FieldSelectorEnum
    atime: FieldSelectorEnum
    atimeMs: FieldSelectorEnum
    base: FieldSelectorEnum
    birthTime: FieldSelectorEnum
    birthtime: FieldSelectorEnum
    birthtimeMs: FieldSelectorEnum
    blksize: FieldSelectorEnum
    blocks: FieldSelectorEnum
    changeTime: FieldSelectorEnum
    childImageSharp: ImageSharpFieldSelector
    children: NodeFieldSelector
    childrenImageSharp: ImageSharpFieldSelector
    ctime: FieldSelectorEnum
    ctimeMs: FieldSelectorEnum
    dev: FieldSelectorEnum
    dir: FieldSelectorEnum
    ext: FieldSelectorEnum
    extension: FieldSelectorEnum
    gid: FieldSelectorEnum
    id: FieldSelectorEnum
    ino: FieldSelectorEnum
    internal: InternalFieldSelector
    mode: FieldSelectorEnum
    modifiedTime: FieldSelectorEnum
    mtime: FieldSelectorEnum
    mtimeMs: FieldSelectorEnum
    name: FieldSelectorEnum
    nlink: FieldSelectorEnum
    parent: NodeFieldSelector
    prettySize: FieldSelectorEnum
    publicURL: FieldSelectorEnum
    rdev: FieldSelectorEnum
    relativeDirectory: FieldSelectorEnum
    relativePath: FieldSelectorEnum
    root: FieldSelectorEnum
    size: FieldSelectorEnum
    sourceInstanceName: FieldSelectorEnum
    uid: FieldSelectorEnum
}

input FileFilterInput {
    absolutePath: StringQueryOperatorInput
    accessTime: DateQueryOperatorInput
    atime: DateQueryOperatorInput
    atimeMs: FloatQueryOperatorInput
    base: StringQueryOperatorInput
    birthTime: DateQueryOperatorInput
    birthtime: DateQueryOperatorInput
    birthtimeMs: FloatQueryOperatorInput
    blksize: IntQueryOperatorInput
    blocks: IntQueryOperatorInput
    changeTime: DateQueryOperatorInput
    childImageSharp: ImageSharpFilterInput
    children: NodeFilterListInput
    childrenImageSharp: ImageSharpFilterListInput
    ctime: DateQueryOperatorInput
    ctimeMs: FloatQueryOperatorInput
    dev: IntQueryOperatorInput
    dir: StringQueryOperatorInput
    ext: StringQueryOperatorInput
    extension: StringQueryOperatorInput
    gid: IntQueryOperatorInput
    id: StringQueryOperatorInput
    ino: FloatQueryOperatorInput
    internal: InternalFilterInput
    mode: IntQueryOperatorInput
    modifiedTime: DateQueryOperatorInput
    mtime: DateQueryOperatorInput
    mtimeMs: FloatQueryOperatorInput
    name: StringQueryOperatorInput
    nlink: IntQueryOperatorInput
    parent: NodeFilterInput
    prettySize: StringQueryOperatorInput
    publicURL: StringQueryOperatorInput
    rdev: IntQueryOperatorInput
    relativeDirectory: StringQueryOperatorInput
    relativePath: StringQueryOperatorInput
    root: StringQueryOperatorInput
    size: IntQueryOperatorInput
    sourceInstanceName: StringQueryOperatorInput
    uid: IntQueryOperatorInput
}

input FileSortInput {
    absolutePath: SortOrderEnum
    accessTime: SortOrderEnum
    atime: SortOrderEnum
    atimeMs: SortOrderEnum
    base: SortOrderEnum
    birthTime: SortOrderEnum
    birthtime: SortOrderEnum
    birthtimeMs: SortOrderEnum
    blksize: SortOrderEnum
    blocks: SortOrderEnum
    changeTime: SortOrderEnum
    childImageSharp: ImageSharpSortInput
    children: NodeSortInput
    childrenImageSharp: ImageSharpSortInput
    ctime: SortOrderEnum
    ctimeMs: SortOrderEnum
    dev: SortOrderEnum
    dir: SortOrderEnum
    ext: SortOrderEnum
    extension: SortOrderEnum
    gid: SortOrderEnum
    id: SortOrderEnum
    ino: SortOrderEnum
    internal: InternalSortInput
    mode: SortOrderEnum
    modifiedTime: SortOrderEnum
    mtime: SortOrderEnum
    mtimeMs: SortOrderEnum
    name: SortOrderEnum
    nlink: SortOrderEnum
    parent: NodeSortInput
    prettySize: SortOrderEnum
    publicURL: SortOrderEnum
    rdev: SortOrderEnum
    relativeDirectory: SortOrderEnum
    relativePath: SortOrderEnum
    root: SortOrderEnum
    size: SortOrderEnum
    sourceInstanceName: SortOrderEnum
    uid: SortOrderEnum
}

input FloatQueryOperatorInput {
    eq: Float
    gt: Float
    gte: Float
    in: [Float]
    lt: Float
    lte: Float
    ne: Float
    nin: [Float]
}

input GatsbyImageDataQueryOperatorInput {
    eq: GatsbyImageData
    in: [GatsbyImageData]
    ne: GatsbyImageData
    nin: [GatsbyImageData]
}

input ImageSharpFieldSelector {
    children: NodeFieldSelector
    fixed: ImageSharpFixedFieldSelector
    fluid: ImageSharpFluidFieldSelector
    gatsbyImageData: FieldSelectorEnum
    id: FieldSelectorEnum
    internal: InternalFieldSelector
    original: ImageSharpOriginalFieldSelector
    parent: NodeFieldSelector
    resize: ImageSharpResizeFieldSelector
}

input ImageSharpFilterInput {
    children: NodeFilterListInput
    fixed: ImageSharpFixedFilterInput
    fluid: ImageSharpFluidFilterInput
    gatsbyImageData: GatsbyImageDataQueryOperatorInput
    id: StringQueryOperatorInput
    internal: InternalFilterInput
    original: ImageSharpOriginalFilterInput
    parent: NodeFilterInput
    resize: ImageSharpResizeFilterInput
}

input ImageSharpFilterListInput {
    elemMatch: ImageSharpFilterInput
}

input ImageSharpFixedFieldSelector {
    aspectRatio: FieldSelectorEnum
    base64: FieldSelectorEnum
    height: FieldSelectorEnum
    originalName: FieldSelectorEnum
    src: FieldSelectorEnum
    srcSet: FieldSelectorEnum
    srcSetWebp: FieldSelectorEnum
    srcWebp: FieldSelectorEnum
    tracedSVG: FieldSelectorEnum
    width: FieldSelectorEnum
}

input ImageSharpFixedFilterInput {
    aspectRatio: FloatQueryOperatorInput
    base64: StringQueryOperatorInput
    height: FloatQueryOperatorInput
    originalName: StringQueryOperatorInput
    src: StringQueryOperatorInput
    srcSet: StringQueryOperatorInput
    srcSetWebp: StringQueryOperatorInput
    srcWebp: StringQueryOperatorInput
    tracedSVG: StringQueryOperatorInput
    width: FloatQueryOperatorInput
}

input ImageSharpFixedSortInput {
    aspectRatio: SortOrderEnum
    base64: SortOrderEnum
    height: SortOrderEnum
    originalName: SortOrderEnum
    src: SortOrderEnum
    srcSet: SortOrderEnum
    srcSetWebp: SortOrderEnum
    srcWebp: SortOrderEnum
    tracedSVG: SortOrderEnum
    width: SortOrderEnum
}

input ImageSharpFluidFieldSelector {
    aspectRatio: FieldSelectorEnum
    base64: FieldSelectorEnum
    originalImg: FieldSelectorEnum
    originalName: FieldSelectorEnum
    presentationHeight: FieldSelectorEnum
    presentationWidth: FieldSelectorEnum
    sizes: FieldSelectorEnum
    src: FieldSelectorEnum
    srcSet: FieldSelectorEnum
    srcSetWebp: FieldSelectorEnum
    srcWebp: FieldSelectorEnum
    tracedSVG: FieldSelectorEnum
}

input ImageSharpFluidFilterInput {
    aspectRatio: FloatQueryOperatorInput
    base64: StringQueryOperatorInput
    originalImg: StringQueryOperatorInput
    originalName: StringQueryOperatorInput
    presentationHeight: IntQueryOperatorInput
    presentationWidth: IntQueryOperatorInput
    sizes: StringQueryOperatorInput
    src: StringQueryOperatorInput
    srcSet: StringQueryOperatorInput
    srcSetWebp: StringQueryOperatorInput
    srcWebp: StringQueryOperatorInput
    tracedSVG: StringQueryOperatorInput
}

input ImageSharpFluidSortInput {
    aspectRatio: SortOrderEnum
    base64: SortOrderEnum
    originalImg: SortOrderEnum
    originalName: SortOrderEnum
    presentationHeight: SortOrderEnum
    presentationWidth: SortOrderEnum
    sizes: SortOrderEnum
    src: SortOrderEnum
    srcSet: SortOrderEnum
    srcSetWebp: SortOrderEnum
    srcWebp: SortOrderEnum
    tracedSVG: SortOrderEnum
}

input ImageSharpOriginalFieldSelector {
    height: FieldSelectorEnum
    src: FieldSelectorEnum
    width: FieldSelectorEnum
}

input ImageSharpOriginalFilterInput {
    height: FloatQueryOperatorInput
    src: StringQueryOperatorInput
    width: FloatQueryOperatorInput
}

input ImageSharpOriginalSortInput {
    height: SortOrderEnum
    src: SortOrderEnum
    width: SortOrderEnum
}

input ImageSharpResizeFieldSelector {
    aspectRatio: FieldSelectorEnum
    height: FieldSelectorEnum
    originalName: FieldSelectorEnum
    src: FieldSelectorEnum
    tracedSVG: FieldSelectorEnum
    width: FieldSelectorEnum
}

input ImageSharpResizeFilterInput {
    aspectRatio: FloatQueryOperatorInput
    height: IntQueryOperatorInput
    originalName: StringQueryOperatorInput
    src: StringQueryOperatorInput
    tracedSVG: StringQueryOperatorInput
    width: IntQueryOperatorInput
}

input ImageSharpResizeSortInput {
    aspectRatio: SortOrderEnum
    height: SortOrderEnum
    originalName: SortOrderEnum
    src: SortOrderEnum
    tracedSVG: SortOrderEnum
    width: SortOrderEnum
}

input ImageSharpSortInput {
    children: NodeSortInput
    fixed: ImageSharpFixedSortInput
    fluid: ImageSharpFluidSortInput
    gatsbyImageData: SortOrderEnum
    id: SortOrderEnum
    internal: InternalSortInput
    original: ImageSharpOriginalSortInput
    parent: NodeSortInput
    resize: ImageSharpResizeSortInput
}

input IntQueryOperatorInput {
    eq: Int
    gt: Int
    gte: Int
    in: [Int]
    lt: Int
    lte: Int
    ne: Int
    nin: [Int]
}

input InternalFieldSelector {
    content: FieldSelectorEnum
    contentDigest: FieldSelectorEnum
    contentFilePath: FieldSelectorEnum
    description: FieldSelectorEnum
    fieldOwners: FieldSelectorEnum
    ignoreType: FieldSelectorEnum
    mediaType: FieldSelectorEnum
    owner: FieldSelectorEnum
    type: FieldSelectorEnum
}

input InternalFilterInput {
    content: StringQueryOperatorInput
    contentDigest: StringQueryOperatorInput
    contentFilePath: StringQueryOperatorInput
    description: StringQueryOperatorInput
    fieldOwners: StringQueryOperatorInput
    ignoreType: BooleanQueryOperatorInput
    mediaType: StringQueryOperatorInput
    owner: StringQueryOperatorInput
    type: StringQueryOperatorInput
}

input InternalSortInput {
    content: SortOrderEnum
    contentDigest: SortOrderEnum
    contentFilePath: SortOrderEnum
    description: SortOrderEnum
    fieldOwners: SortOrderEnum
    ignoreType: SortOrderEnum
    mediaType: SortOrderEnum
    owner: SortOrderEnum
    type: SortOrderEnum
}

input JPGOptions {
    progressive: Boolean = true
    quality: Int
}

input JSONQueryOperatorInput {
    eq: JSON
    glob: JSON
    in: [JSON]
    ne: JSON
    nin: [JSON]
    regex: JSON
}

input NodeFieldSelector {
    children: NodeFieldSelector
    id: FieldSelectorEnum
    internal: InternalFieldSelector
    parent: NodeFieldSelector
}

input NodeFilterInput {
    children: NodeFilterListInput
    id: StringQueryOperatorInput
    internal: InternalFilterInput
    parent: NodeFilterInput
}

input NodeFilterListInput {
    elemMatch: NodeFilterInput
}

input NodeSortInput {
    children: NodeSortInput
    id: SortOrderEnum
    internal: InternalSortInput
    parent: NodeSortInput
}

input PNGOptions {
    compressionSpeed: Int = 4
    quality: Int
}

input Potrace {
    alphaMax: Float
    background: String
    blackOnWhite: Boolean
    color: String
    optCurve: Boolean
    optTolerance: Float
    threshold: Int
    turdSize: Float
    turnPolicy: PotraceTurnPolicy
}

input SiteBuildMetadataFieldSelector {
    buildTime: FieldSelectorEnum
    children: NodeFieldSelector
    id: FieldSelectorEnum
    internal: InternalFieldSelector
    parent: NodeFieldSelector
}

input SiteBuildMetadataFilterInput {
    buildTime: DateQueryOperatorInput
    children: NodeFilterListInput
    id: StringQueryOperatorInput
    internal: InternalFilterInput
    parent: NodeFilterInput
}

input SiteBuildMetadataSortInput {
    buildTime: SortOrderEnum
    children: NodeSortInput
    id: SortOrderEnum
    internal: InternalSortInput
    parent: NodeSortInput
}

input SiteFieldSelector {
    buildTime: FieldSelectorEnum
    children: NodeFieldSelector
    graphqlTypegen: SiteGraphqlTypegenFieldSelector
    host: FieldSelectorEnum
    id: FieldSelectorEnum
    internal: InternalFieldSelector
    jsxRuntime: FieldSelectorEnum
    parent: NodeFieldSelector
    pathPrefix: FieldSelectorEnum
    polyfill: FieldSelectorEnum
    port: FieldSelectorEnum
    siteMetadata: SiteSiteMetadataFieldSelector
    trailingSlash: FieldSelectorEnum
}

input SiteFilterInput {
    buildTime: DateQueryOperatorInput
    children: NodeFilterListInput
    graphqlTypegen: SiteGraphqlTypegenFilterInput
    host: StringQueryOperatorInput
    id: StringQueryOperatorInput
    internal: InternalFilterInput
    jsxRuntime: StringQueryOperatorInput
    parent: NodeFilterInput
    pathPrefix: StringQueryOperatorInput
    polyfill: BooleanQueryOperatorInput
    port: IntQueryOperatorInput
    siteMetadata: SiteSiteMetadataFilterInput
    trailingSlash: StringQueryOperatorInput
}

input SiteFunctionFieldSelector {
    absoluteCompiledFilePath: FieldSelectorEnum
    children: NodeFieldSelector
    functionRoute: FieldSelectorEnum
    id: FieldSelectorEnum
    internal: InternalFieldSelector
    matchPath: FieldSelectorEnum
    originalAbsoluteFilePath: FieldSelectorEnum
    originalRelativeFilePath: FieldSelectorEnum
    parent: NodeFieldSelector
    pluginName: FieldSelectorEnum
    relativeCompiledFilePath: FieldSelectorEnum
}

input SiteFunctionFilterInput {
    absoluteCompiledFilePath: StringQueryOperatorInput
    children: NodeFilterListInput
    functionRoute: StringQueryOperatorInput
    id: StringQueryOperatorInput
    internal: InternalFilterInput
    matchPath: StringQueryOperatorInput
    originalAbsoluteFilePath: StringQueryOperatorInput
    originalRelativeFilePath: StringQueryOperatorInput
    parent: NodeFilterInput
    pluginName: StringQueryOperatorInput
    relativeCompiledFilePath: StringQueryOperatorInput
}

input SiteFunctionSortInput {
    absoluteCompiledFilePath: SortOrderEnum
    children: NodeSortInput
    functionRoute: SortOrderEnum
    id: SortOrderEnum
    internal: InternalSortInput
    matchPath: SortOrderEnum
    originalAbsoluteFilePath: SortOrderEnum
    originalRelativeFilePath: SortOrderEnum
    parent: NodeSortInput
    pluginName: SortOrderEnum
    relativeCompiledFilePath: SortOrderEnum
}

input SiteGraphqlTypegenFieldSelector {
    documentSearchPaths: FieldSelectorEnum
    generateOnBuild: FieldSelectorEnum
    typesOutputPath: FieldSelectorEnum
}

input SiteGraphqlTypegenFilterInput {
    documentSearchPaths: StringQueryOperatorInput
    generateOnBuild: BooleanQueryOperatorInput
    typesOutputPath: StringQueryOperatorInput
}

input SiteGraphqlTypegenSortInput {
    documentSearchPaths: SortOrderEnum
    generateOnBuild: SortOrderEnum
    typesOutputPath: SortOrderEnum
}

input SitePageFieldSelector {
    children: NodeFieldSelector
    component: FieldSelectorEnum
    componentChunkName: FieldSelectorEnum
    id: FieldSelectorEnum
    internal: InternalFieldSelector
    internalComponentName: FieldSelectorEnum
    matchPath: FieldSelectorEnum
    pageContext: FieldSelectorEnum
    parent: NodeFieldSelector
    path: FieldSelectorEnum
    pluginCreator: SitePluginFieldSelector
}

input SitePageFilterInput {
    children: NodeFilterListInput
    component: StringQueryOperatorInput
    componentChunkName: StringQueryOperatorInput
    id: StringQueryOperatorInput
    internal: InternalFilterInput
    internalComponentName: StringQueryOperatorInput
    matchPath: StringQueryOperatorInput
    pageContext: JSONQueryOperatorInput
    parent: NodeFilterInput
    path: StringQueryOperatorInput
    pluginCreator: SitePluginFilterInput
}

input SitePageSortInput {
    children: NodeSortInput
    component: SortOrderEnum
    componentChunkName: SortOrderEnum
    id: SortOrderEnum
    internal: InternalSortInput
    internalComponentName: SortOrderEnum
    matchPath: SortOrderEnum
    pageContext: SortOrderEnum
    parent: NodeSortInput
    path: SortOrderEnum
    pluginCreator: SitePluginSortInput
}

input SitePluginFieldSelector {
    browserAPIs: FieldSelectorEnum
    children: NodeFieldSelector
    id: FieldSelectorEnum
    internal: InternalFieldSelector
    name: FieldSelectorEnum
    nodeAPIs: FieldSelectorEnum
    packageJson: FieldSelectorEnum
    parent: NodeFieldSelector
    pluginFilepath: FieldSelectorEnum
    pluginOptions: FieldSelectorEnum
    resolve: FieldSelectorEnum
    ssrAPIs: FieldSelectorEnum
    version: FieldSelectorEnum
}

input SitePluginFilterInput {
    browserAPIs: StringQueryOperatorInput
    children: NodeFilterListInput
    id: StringQueryOperatorInput
    internal: InternalFilterInput
    name: StringQueryOperatorInput
    nodeAPIs: StringQueryOperatorInput
    packageJson: JSONQueryOperatorInput
    parent: NodeFilterInput
    pluginFilepath: StringQueryOperatorInput
    pluginOptions: JSONQueryOperatorInput
    resolve: StringQueryOperatorInput
    ssrAPIs: StringQueryOperatorInput
    version: StringQueryOperatorInput
}

input SitePluginSortInput {
    browserAPIs: SortOrderEnum
    children: NodeSortInput
    id: SortOrderEnum
    internal: InternalSortInput
    name: SortOrderEnum
    nodeAPIs: SortOrderEnum
    packageJson: SortOrderEnum
    parent: NodeSortInput
    pluginFilepath: SortOrderEnum
    pluginOptions: SortOrderEnum
    resolve: SortOrderEnum
    ssrAPIs: SortOrderEnum
    version: SortOrderEnum
}

input SiteSiteMetadataFieldSelector {
    description: FieldSelectorEnum
    siteUrl: FieldSelectorEnum
    title: FieldSelectorEnum
}

input SiteSiteMetadataFilterInput {
    description: StringQueryOperatorInput
    siteUrl: StringQueryOperatorInput
    title: StringQueryOperatorInput
}

input SiteSiteMetadataSortInput {
    description: SortOrderEnum
    siteUrl: SortOrderEnum
    title: SortOrderEnum
}

input SiteSortInput {
    buildTime: SortOrderEnum
    children: NodeSortInput
    graphqlTypegen: SiteGraphqlTypegenSortInput
    host: SortOrderEnum
    id: SortOrderEnum
    internal: InternalSortInput
    jsxRuntime: SortOrderEnum
    parent: NodeSortInput
    pathPrefix: SortOrderEnum
    polyfill: SortOrderEnum
    port: SortOrderEnum
    siteMetadata: SiteSiteMetadataSortInput
    trailingSlash: SortOrderEnum
}

input StringQueryOperatorInput {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input TransformOptions {
    cropFocus: ImageCropFocus = ATTENTION
    duotone: DuotoneGradient
    fit: ImageFit = COVER
    grayscale: Boolean = false
    rotate: Int = 0
    trim: Float = 0.0
}

input WebPOptions {
    quality: Int
}
